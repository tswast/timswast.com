<rss version="2.0">
  <channel>
    <title>Tim Swast</title>
    <description>Tim's blog.</description>
    <link>https://www.timswast.com/blog/</link>
<!--START INDEX-->

    <item>
      
      <description><![CDATA[
        Peer-to-peer is the real serverless.

<a href="https://youtu.be/rJ_WvfF3FN8">https://youtu.be/rJ_WvfF3FN8</a>

      ]]></description>
      <pubDate>Sat, 18 Aug 2018 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2018/08/18/note/</guid>
      <link>https://www.timswast.com/blog/2018/08/18/note/</link>
      <author>@timswast</author>
    </item>

    <item>
      
      <description><![CDATA[
        I designed some logos for the Ibis Python library. Drawn in #inkscape

I'm grateful to live in a time when photo references abound, because I don't recall if I've ever seen an ibis in person, much less able to draw one from memory.

Logo proposal: <a href="https://github.com/ibis-project/ibis/issues/1584">https://github.com/ibis-project/ibis/issues/1584</a>

      ]]></description>
      <pubDate>Sat, 11 Aug 2018 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2018/08/11/ibis-logo-designs/</guid>
      <link>https://www.timswast.com/blog/2018/08/11/ibis-logo-designs/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Ssite for Handwritten Static Sites - Five Years Later</title>
      <description><![CDATA[
        
<p class="e-summary">Five years ago, I <a href="/blog/2013/06/10/introducting-locoloco-the-little-engine-that-didnt/">
announced</a> that I had made the <a href="https://github.com/tswast/ssite">ssite
static site enhancement tool</a> public. In this post, I’ll reflect on
my experience of using ssite to maintain this website for the past half
decade.</p>

<p><img alt="How this blog post was published. Google Docs exports to ugly
HTML. Clean up with the ssite command and build an index." src="/blog/2018/07/21/5-years-of-ssite/images/image1.jpg"/>

</p><h2>Posting a new article</h2>
<p>The main purpose of this website is to serve as my personal blog, so the
thing I do most often (but still not as often as I’d like), is post new
articles to the site.

</p><p>With ssite, the process of posting a new article is straightforward. For
the full experience it requires the use of a couple Python scripts, but
overall it should be natural to anyone that has ever drafted an HTML
document.

</p><ol start="1">
  <li>
  Write a draft. In the case of this article I'm writing in a Google Doc, but I
drafted most posts as hand-written HTML.
  </li>
  <li>
  Create a plain HTML version using a <a href="https://github.com/tswast/timswast.com/blob/6049c19616b47761300ad6a0b2100b46a69dba3d/blog/template.html">simple
  HTML template</a> and place the file at
  <code>blog/YEAR/MONTH/DAY/TITLE/index.html</code> for publishing.
  </li>
  <li>
  Run <code>ssite index</code> to update the blog post index page.
  </li>
  <li>
  Publish the changes to the
  <a href="https://github.com/tswast/timswast.com">GitHub repository</a>, the
  <a href="https://www.timswast.com/">HTTPS version</a>, and the <a href="dat://www.timswast.com">Dat version</a> (The Dat version is a recent
  addition, managed by the <a href="https://docs.datproject.org/dat">Dat
  CLI</a>, pinned by <a href="https://hashbase.io/">Hashbase</a>, and
  viewable in <a href="https://beakerbrowser.com/">Beaker Browser</a>).
  </li>
</ol>

<p>Overall, this process is smooth, but it is more cumbersome than I’d like.
I haven't encountered any problems with hosting, but I do have some ideas
about how to improve the process.

</p><h2>Static sites keep serving simple</h2>
<p>Instead of this manual process, I could use a blog engine like WordPress.
Indeed, the whole flow would be easier if I could edit and publish blog posts
entirely online. While I do want the process to be easy, I also want to
minimize the time I spend maintaining the site. If I were to run this site on
a blog engine, I would have to keep servers running, apply security patches,
and keep the code updated to the latest versions.

</p><p>With static HTML, any web server is capable of hosting my website. Because
the site is just a collection of static files, I don’t need to do much of
anything to keep it running. It’s a freeing feeling.

</p><p>Keeping the server simple also makes the site easier to scale if any post
gets popular. It’s much easier to scale up the number of instances of a
static content server than it is to scale up a bunch of servers that
dynamically generate pages.

</p><p>For the same reasons that a static site is easy to scale, it is easy to
archive. To host a backup copy, all someone needs is a copy of the content.
They could download the files from my server or the whole site history from
the source code on GitHub. With the <a href="https://datproject.org/">Dat
protocol</a>, it is even easier to archive; anyone can keep the site alive by
pinning it in Beaker Browser.

</p><p>On the authoring side, one reason I like static HTML is that it’s quite
easy to add JavaScript in <a href="https://www.timswast.com/blog/2013/08/07/markov-chains-tutorial/">rare
posts with client-side dynamic content</a>. With other tools, I would have
to much more careful to ensure the JavaScript I write does not conflict with
the generated code. I might even have to write a blog engine plugin to insert
the script tag at all.

</p><h2>Enhance; don’t generate</h2>
<p>A downside of static HTML is that it results in repeated code. For
example, a navigation section must be repeated on all pages in the site. This
is at odds with one of the cardinal rules of programming:
   <a href="http://wiki.c2.com/?DontRepeatYourself">
    don’t repeat yourself
   </a>.
One way to address this is to use templates and run a generator such as <a href="https://jekyllrb.com/">Jekyll</a> or <a href="https://gohugo.io/">Hugo</a> to create a rendered version of all pages.
Previously, I generated this site using <a href="http://hyde.github.io/">Hyde</a>, but I disliked a few things about
this process.

</p><ul>
  <li>
  When editing, I had to run a build step every time that I want to see what the
rendered version would look like.
  </li>
  <li>
  I felt an obligation to keep the generator tools up-to-date, which sometimes
mean that I have to make additional edits to the templates.
  </li>
  <li>
  I wanted it to be very clear to anyone how to build my site and host it for
archival purposes or if someone wanted to contribute content such as
translations. With any static site generator, a contributor would have to learn
the templating language and how to run the generator. Plain HTML is much easier
to learn than how to run a generator.
  </li>
</ul>

<p>I’ve started following a new principle: enhance, don’t generate. Use tools
to make the static HTML files better and only generate the bare minimum that
needs to be generated. In my case, the blog post index page is generated by
ssite index, but in all other pages the source is the rendered version. Even
with a generated blog index, I check the rendered version into version
control. The whole site is complete from source without any external
generator tools.

</p><p>Without a generator, one way I’ve tried to avoid repeating code is that I
don’t have a fancy navigation bar anymore. It was the first thing to go when
I stopped generating the article pages. I have no regrets about dropping it;
what people care about when they land on a blog post is the actual content.
I’ve stripped away navigation links, header, and sidebars. That leaves just
the content and a little footer note about attribution.

</p><h2>Has this met my goals?</h2>
<p>Overall, I’m pleased with the experience of using static HTML for my website. I
do have some pain points, but I want to address those without sacrificing the
simplicity of having the source files be the same as the rendered version.

</p><h3>Easy of use for editing</h3>
<p>I’ve become less satisfied drafting articles in hand-written HTML than
when I started. At home, I use a phone and tablet more often than I do a
laptop. I want to be able to continue editing a draft on any of my devices,
whether I’m using a laptop, desktop, iPad, or phone. I’ve tried a handful of
mobile HTML editors, but none as easy to use or synchronize across devices as
Google Docs.

</p><p>When I draft blog posts in hand-written HTML, I also find it awkward to to
use a date-based path (<code>YYYY/MM/DD/title/index.html</code>) for the
draft file. I don’t know exactly when I’ll finish something, so it’s awkward
to pick a date in advance. I always have to edit the date again when I’m
finally ready to publish the post, usually way past the date I first
estimated.

</p><p>I’m adding to ssite scripts to make this a little better. For example, I
like to draft articles in Google Docs. Google Docs can export as HTML, but
the HTML is a bit messy and isn’t compatible with the CSS of this site, so
I’ve created a <code>ssite clean</code> script to remove messy markup that
gets in the way of my site’s style.

</p><p>Besides writing blog posts, I also draw pixel art illustrations and
animations, but it’s rare for me to post my art here. I created collections
of all the pixel art I drew for
   <a href="https://www.timswast.com/blog/2016/11/03/octobit/">
    Octobit 2016
   </a>
   and
   <a href="https://www.timswast.com/blog/2017/10/31/octobit/">
    Octobit 2017
   </a>,
but I posted those images here well was after I had posted them elsewhere.
One reason I don’t post
   <a href="https://www.timswast.com/blog/2016/08/11/steam-train-pixel-art/">
    individual artworks
   </a>
often is that a blog post feels too heavy-weight for just an image with a
caption. I’d like to explore ways to post art via
   <a href="https://indieweb.org/note">
    IndieWeb “notes”
   </a>
while maintaining the enhancement principle in ssite.

</p><h3>Ease of use for publishing</h3>
<p>It’s so much easier to post to elsewhere compared to writing static HTML
and pushing it to a server. Even though that process is simple, it’s a few
steps and it pretty much requires my laptop. Also, posting here can sometimes
feel like duplicate work because when I do post here, I still feel that I
have to post to social media, since that’s where my friends will actually see
it.

</p><p>An approach I’d like to explore is the <a href="https://indieweb.org/POSSE">IndieWeb POSSE model</a>.
The idea is that it should be easy to make a post on my site and syndicate it
to social media. When I post a pixel art image here, it should also appear on
<a href="https://www.instagram.com/timswast/">Instagram</a>,
<a href="https://twitter.com/timswast?lang=en">Twitter</a>,
<a href="https://www.facebook.com/tswast">Facebook</a>,
<a href="https://timswast.tumblr.com">Tumblr</a>,
<a href="https://cybre.space/@timswast">Mastodon</a>,
<a href="https://giphy.com/timswast">Giphy</a>, and
<a href="https://plus.google.com/+TimSwast">Google+</a>.
Some automation would help because it’s a lot of work to make posts by hand,
especially when pixel art is involved, because each site
<a href="https://twitter.com/pixel_dailies/status/705200381505048576?s=21">renders
pixel art best when you upload to very specific file formats and sizes</a>.

</p><h3>Maintenance burden</h3>
<p>I did make some software upgrades in the past 5 years. I modified ssite to
run on Python 3, and I replaced MathJax with KaTeX. Since I initiated these
updates rather having been forced into them, they did not feel like a burden.

</p><p>Overall, I’ve spent very little time (only a handful of hours) keeping my
website maintained compared to writing content. I hardly think about about
hosting and other software updates. Since I’ve kept the HTML and CSS quite
simple, browsers render the sites just as well today as they did when I first
wrote it.

</p><h2>Conclusion</h2>
<p>Overall, I’m happy with static HTML. I’ll continue to use hand-written
HTML, but I will build more tools to improve the publishing and editing
experience. I want to make it just as easy to publish here as it is to
publish on social media, while still preserving the benefits of a static
website.

</p><footer>
  Released under <a href="https://creativecommons.org/licenses/by/4.0/">Creative Commons
  Attribution License</a>. Copyright 2018, <a class="p-author h-card" href="/" rel="author">Tim Swast</a>.
</footer>

      ]]></description>
      <pubDate>Sat, 21 Jul 2018 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2018/07/21/5-years-of-ssite/</guid>
      <link>https://www.timswast.com/blog/2018/07/21/5-years-of-ssite/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>What are the most popular Citibike destinations for NYC
  couples?</title>
      <description><![CDATA[
        
<p class="e-summary">For this Valentine’s Day themed data doodle, let’s use
BigQuery and the <a href="https://cloud.google.com/bigquery/public-data/nyc-citi-bike">New York
City public dataset on Citibike trips</a> and to find a romantic spot to bike
to with a significant other.</p>

 <figure>
  <img alt="" src="/third_party/loc/pictures/2017826066/image.jpg"/>
  <figcaption>Boys and a girl on bicycles. Source: <a href="http://www.loc.gov/pictures/resource/fsa.8c28579/">Library of
  Congress Prints &amp; Photographs Division</a></figcaption>
</figure>

<p>The number 1 spot for groups of people to bike to together is the
   <a href="https://www.google.com/maps/place/5th+Ave+%26+E+88th+St,+New+York,+NY+10128/@40.7799533,-73.9702846,15.08z/data=!4m5!3m4!1s0x89c258a29e220ba3:0x4f94dc983b291f7c!8m2!3d40.7828435!4d-73.9594741">
    5 Ave &amp; E 88 St Citibike station</a>,
right by Central Park, with 30% of trips completed by groups. Also in top
spots were the other stations around Central Park:
<a href="https://www.google.com/maps/place/5th+Ave+%26+E+78th+St,+New+York,+NY+10075/@40.7763249,-73.9664143,17z/data=!3m1!4b1!4m5!3m4!1s0x89c2589416c54e09:0xcaedfd474a96c06b!8m2!3d40.7763209!4d-73.9642256">
    5 Ave &amp; E 78 St
   </a>
   and
   <a href="https://www.google.com/maps/place/5th+Ave+%26+E+93rd+St,+New+York,+NY+10128/@40.7742504,-73.9747535,14.55z/data=!4m5!3m4!1s0x89c258a187f56d67:0x449ceb89987dd6c4!8m2!3d40.7859635!4d-73.9571813">
    5 Ave &amp; E 93 St</a>.

  </p><p>The runner-up is
   <a href="https://www.google.com/maps/place/Tillary+St+%26+Cadman+Plaza+E,+Brooklyn,+NY+11201/@40.6963347,-73.9922202,17z/data=!3m1!4b1!4m5!3m4!1s0x89c25a49e66cda4f:0x16ddbe3ce6563191!8m2!3d40.6963307!4d-73.9900315">
    Cadman Plaza E &amp; Tillary St
   </a>
   in Brooklyn, with 26% of trips completed by groups. Third place goes to
   <a href="https://www.google.com/maps/place/Citi+Bike+-+Brooklyn+Bridge+Park+-+Pier+2/@40.6963866,-73.9987862,15z/data=!4m8!1m2!2m1!1zQnJvb2tseW4gQnJpZGdlIFBhcmvigIrigJTigIpQaWVyIDIgY2l0aWJpa2U!3m4!1s0x0:0xa5e291597d74e6d!8m2!3d40.6987794!4d-73.9971203">
    Brooklyn Bridge Park — Pier 2</a>, with 22% of trips completed by groups.



</p><p>Where does the data say you shouldn’t you take your significant other?
Only 1% of trips completed at the <a href="https://www.citibikenyc.com/valet">Penn Station Valet station</a> were
by groups of cyclists.

</p><p>Code for the <a href="https://gist.github.com/tswast/6f64b09f5cd12fcb890bf30db06c6133#file-nyc-citibike-groups-destinations-sql">
query to find where couples are going on the NYC Citibikes</a>:

</p><pre><code>#standardSql
SELECT
  group_trips / (single_trips + group_trips) AS percent_groups,
  single_trips + group_trips AS total_trips,
  q.end_station_id AS end_station_id,
  stations.name AS name,
  stations.latitude AS latitude,
  stations.longitude AS longitude
FROM (
  SELECT
    COUNTIF(group_size = 1) AS single_trips,
    COUNTIF(group_size != 1) AS group_trips,
    end_station_id
  FROM (
    SELECT
      ROUND(UNIX_SECONDS(starttime) / 120) AS start,
      -- round to nearest 2 minutes
      ROUND(UNIX_SECONDS(stoptime) / 120) AS stop,
      -- round to nearest 2 minutes
      start_station_id,
      end_station_id,
      COUNT(*) AS group_size
    FROM
      `bigquery-public-data.new_york.citibike_trips`
    GROUP BY
      start,
      stop,
      start_station_id,
      end_station_id )
  GROUP BY
    end_station_id ) q
LEFT JOIN
  `bigquery-public-data.new_york.citibike_stations` AS stations
ON
  q.end_station_id = stations.station_id
ORDER BY
percent_groups DESC
</code></pre>

<p>Breaking this query down, I group Citibike trips together into ones that start
and end at about the same time. If the grouped-together trip had more than one
person in it, then it’s counted as a group trip. This could be a couple or a
group of friends riding together. Possibly it could be people that happened
to check out a bike at the same time and go to the same place at the same
rate, but I’m considering that a rare occurrence. Then, I find which stations
have the highest percentage of trips from groups versus single-rider
trips.

</p><p>If you want to run the analysis yourself, I’ve shared the query
<a href="https://bigquery.cloud.google.com/savedquery/769108155013:3a6019fa0d2e461eaf2fab00c314273a">
here</a>. You can run the BigQuery queries in this data doodle for
<a href="https://cloud.google.com/blog/big-data/2017/01/how-to-run-a-terabyte-of-google-bigquery-queries-each-month-without-a-credit-card">
free, no credit card required, with 1TB of free queries per month</a>.

</p>
      ]]></description>
      <pubDate>Tue, 14 Feb 2017 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2017/02/14/couples-nyc-citibike-trips/</guid>
      <link>https://www.timswast.com/blog/2017/02/14/couples-nyc-citibike-trips/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Pixel Art Walking Animation #1</title>
      <description><![CDATA[
        
  <p class="p-summary">I have been drawing a few pixel art walking animations, lately. This has been a lot of fun. Animation adds some life to the artwork and can add some goofy fun to drawing.</p>

  <img alt="a walking animation of a pixel art style chicken hen" class="pixel-art u-photo" src="/blog/2015/08/22/pixel-art-walking/hen.gif"/>

  <p>
    One of the lessons I've learned doing this is that subtle changes work better than detailed changes, especially at low resolutions. I started this baby dinosaur with the version on the left. It has spots that seem to jump around. I tried to get too detailed and it ended up distracting.
  </p>

  <p>
    The middle dinosaur is better, but it's spots still wiggle in an unnatural way. Once I removed the details from the spots, it became much easier to watch the dinosaur as a whole instead of getting distracted by weird movements. I could even add some depth by having two arms without making it feel like there was too much going on.
  </p>

  <img alt="a walking animation of a pixel art style baby dinosaur. Its spots change too much." class="pixel-art" src="/blog/2015/08/22/pixel-art-walking/dino-v1.gif" style="max-width: 10em; float: left"/>
  <img alt="a walking animation of a pixel art style baby dinosaur. Its spots change less, but still too much." class="pixel-art" src="/blog/2015/08/22/pixel-art-walking/dino-v2.gif" style="max-width: 10em; float: left"/>
  <img alt="a walking animation of a pixel art style baby dinosaur. Its spots change only slightly." class="pixel-art u-photo" id="image-dino" src="/blog/2015/08/22/pixel-art-walking/dino.gif" style="max-width: 10em;"/>

  <p>
    This reminds me of something "every frame a painting" says about Chuck Jones. He was a master of using the smallest movement possible to communicate. He is a wonderful animator and story teller, and there's a lot I can learn from him.
  </p>

  <iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/kHpXle4NqWI" width="420"></iframe>

  <p>
    I made a few other animations, as well. This squid doesn't have much detail, but at least it's not distracting.
  </p>

  <img alt="a walking animation of a pixel art style squid" class="pixel-art u-photo" id="image-squid" src="/blog/2015/08/22/pixel-art-walking/squid.gif"/>

  <p>I was able to get a little more movement out of this cowboy, but I kept details light to focus more on the movement.</p>

  <img alt="a walking animation of a pixel art style cowboy" class="pixel-art u-photo" id="image-cowbow" src="/blog/2015/08/22/pixel-art-walking/cowboy.gif"/>

      ]]></description>
      <pubDate>Sat, 22 Aug 2015 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2015/08/22/pixel-art-walking/</guid>
      <link>https://www.timswast.com/blog/2015/08/22/pixel-art-walking/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>New York City Subway Pixel Art</title>
      <description><![CDATA[
        
<p class="e-summary">I was riding an <a href="https://en.wikipedia.org/wiki/E_(New_York_City_Subway_service)">E
train</a> <a href="https://en.wikipedia.org/wiki/R160_(New_York_City_Subway_car)">subway
car</a> in New York City, and I noticed some pixel art in the wild. The nice
FIND (Flexible Information and Notice Display) system which shows next stops
includes a pixel art wheelchair icon for accessible stations.</p>

<img alt="an LED screen for a subway car showing next stops. A wheelchair symbol made of 16 red LEDs is magnified." src="/blog/2015/07/13/subway-pixel-art/subway-accessible-station.jpg"/>

<p>After admiring this, I decided to recreate it.</p>

<img alt="a pixel-art version of a wheelchair symbol" class="pixel-art u-photo" src="/blog/2015/07/13/subway-pixel-art/wheelchair-pixel-art.png"/>

<p>One reason I really enjoy pixel art is that it allows you to do a lot with
very few materials. Here the MTA subway car uses only 16 red LED lights, but
does so in a way that is obvious what they are trying to communicate.</p>

      ]]></description>
      <pubDate>Mon, 13 Jul 2015 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2015/07/13/subway-pixel-art/</guid>
      <link>https://www.timswast.com/blog/2015/07/13/subway-pixel-art/</link>
      <author>@timswast</author>
    </item>

    <item>
      
      <description><![CDATA[
        May the Fourth be with you. A #pixelart x-wing.

Drawn on my iPad in <a href="http://pixaki.com/">Pixaki</a> and animated in <a href="http://terriblegames.com/spriteSomething/">Sprite Something</a>.
      ]]></description>
      <pubDate>Mon, 04 May 2015 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2015/05/04/may-the-fourth-be-with-you/</guid>
      <link>https://www.timswast.com/blog/2015/05/04/may-the-fourth-be-with-you/</link>
      <author>@timswast</author>
    </item>

    <item>
      
      <description><![CDATA[
        Bunny says eat your veggies. I drew this little #pixelart guy just after Easter. He really likes his carrots. Nom nom nom.
      ]]></description>
      <pubDate>Sat, 02 May 2015 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2015/05/02/bunny-says-eat-your-veggies/</guid>
      <link>https://www.timswast.com/blog/2015/05/02/bunny-says-eat-your-veggies/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Fishermen @ C</title>
      <description><![CDATA[
        
<p class="e-summary">I learned about the artist <a href="http://en.wikipedia.org/wiki/J._M._W._Turner">J. M. W. Turner</a>
last month through the <a href="http://lifehacker.com/google-art-project-puts-an-art-masterpiece-on-every-new-1691052441">Google
Art Project New Chrome Tab</a> extension. He is known as “the painter
of light” and after looking at some of his works, I agree with that
statement.
</p>

<a href="https://www.google.com/culturalinstitute/u/0/asset-viewer/fishermen-at-sea/UwG73jK8wqshlw?hl=en">
  <img alt="Fisherman at Sea painting by J. M. W. Turner" class="u-photo" src="/blog/2015/03/22/fishermen-at-c/fishermen-at-sea.jpg"/>
</a>

<p>Seeing the great use of light in J. M. W. Turner's Fishermen at Sea, I
decided I'd try emulating it but in pixel art style. This was a lot more
ambitious than my previous works, and it definitely stretched my skills. It
took a month of drawing sessions (mostly in the morning on the couch at
breakfast), but I finally finished it. </p>

<img alt="Two fishing boats on a dark sea, drawn in pixel art style." class="pixel-art u-photo" id="fishermen-at-c-pixel-art" src="/blog/2015/03/22/fishermen-at-c/fishermen-at-c-2015-03-13.png"/>

<p>It really made me appreciate how J. W. M. Turner must have spent even
more time and had even more skill to create such a beautiful, realistic
scene using paint.</p>

<img alt="Timelapse of drawing the pixel art fishing boats." class="pixel-art" src="/blog/2015/03/22/fishermen-at-c/timelapse.gif"/>

      ]]></description>
      <pubDate>Sun, 22 Mar 2015 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2015/03/22/fishermen-at-c/</guid>
      <link>https://www.timswast.com/blog/2015/03/22/fishermen-at-c/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>How to share ToDos with your spouse</title>
      <description><![CDATA[
        
<p class="e-summary">My wife and I use an app called <a href="http://www.2doapp.com/">2do</a> to share ToDos and shopping lists with
each other. It is a beautiful app, which works for Mac, iOS, and Android. It
allows us to have the same list on both her phone and mine.</p>

<img alt="A grocery list shared between my wife and I." class="blog-post-screenshot" src="/blog/2014/01/06/how-to-share-todos-with-your-spouse/todos.png"/>

<p>To sync with each other, we have created a shared account on <a href="http://www.toodledo.com/">Toodledo.</a> Remember your user name and
password. Perhaps save it in a secure password saving app like <a href="http://minikeepass.github.io/">MiniKeePass</a>.</p>

<p> Next, go into the 2do app and click settings.
</p>

<img alt="The 2do settings tab. The most important option is 'Setup' under 'Sync'" class="blog-post-screenshot" src="/blog/2014/01/06/how-to-share-todos-with-your-spouse/settings.png"/>

<p> Click “Setup” under “Sync”.
</p>

<img alt="A page of options relating to sync." class="blog-post-screenshot" src="/blog/2014/01/06/how-to-share-todos-with-your-spouse/syncsettings.png"/>

<p> From here, select "Sync Method: (something)". This will take you to
another page. At the top, make sure Sync Method: Toodledo is selected. Then,
enter your Toodledo username and password.
</p>

<img alt="Sync Method: Toodledo settings page." class="blog-post-screenshot" src="/blog/2014/01/06/how-to-share-todos-with-your-spouse/syncsetup.png"/>

<p> Now, you can go back to the Tasks list and click Sync. This will upload
your tasks, todos, or shopping lists up to Toodledo's servers. If you follow
these same steps on your spouses phone, you both can sync to the same account
and see the same lists! It even works if one of you has an Android phone and
the other has an iPhone. I tested it with my Moto X.
</p>


      ]]></description>
      <pubDate>Mon, 06 Jan 2014 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2014/01/06/how-to-share-todos-with-your-spouse/</guid>
      <link>https://www.timswast.com/blog/2014/01/06/how-to-share-todos-with-your-spouse/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Finding Gray codes with backtracking in Python</title>
      <description><![CDATA[
        
<p class="e-summary"><a href="http://en.wikipedia.org/wiki/Gray_code">Gray codes</a> are ways
of writing numbers using only 0s and 1s. They share the property that as one
goes from one number to the next, only one binary digit (bit) changes. For
example, if one is represented as “001”, then two might be
represented as “011”; only the middle bit changes. </p>


        <h2>How are Gray codes used?</h2>
        <p>
        There is a family of Gray codes which is widely used called reflected binary Gray codes. These are <a href="http://www.cs.cmu.edu/Groups/AI/html/faqs/ai/genetic/part6/faq-doc-1.html">simple to convert to and from standard binary notation</a>. This makes them useful in embedded systems. For example, some <a href="http://en.wikipedia.org/wiki/Rotary_encoder">rotary encoders</a> use reflected binary Gray codes to indicate position around a circle.
        </p>
        <img alt="a rotary encoder, which uses Gray codes to encode the angle of rotation. There are concentric rings, broken into wedges. The rings within the wedges are colored black to represent 0 and white to represent 1." src="/blog/2013/12/29/finding-gray-codes-with-backtracking-in-python/encoder.svg" width="100%"/>


       <h2>Just how many Gray codes are there?</h2>
       <p>
       There are more Gray codes than the reflected binary Gray codes. In fact, there are <em>many</em> more. Since a Gray code can count arbitrarily high, there are an infinite number of different codes. What is more interesting is <a href="http://oeis.org/A003042">how many different Gray codes can be created using N bits.</a> Say we have 4 bits, which can represent 16 different numbers. How many Gray codes with 4 bits can create a cycle with 16 elements?
       </p>

        <p>
            One way answering this question is to use <a href="http://en.wikipedia.org/wiki/Backtracking">backtracking.</a> Mostly, backtracking is a a way of saying “search the whole set of possible solutions using a depth-first search,„ but if a partial solution in our search cannot possibly be correct, we do not need to continue searching solutions which include that partial solution. For example, if I was searching for solutions to the <a href="http://en.wikipedia.org/wiki/Eight_queens_puzzle"><em>n</em>-queens problem</a>, and I have a partial solution with only two queens and they are attacking each other, I do not need to continue searching for solutions that contain these two queen positions.
        </p>


        <h2>So how do we use backtracking?</h2>
        <p><a href="http://en.wikipedia.org/wiki/Backtracking#Pseudocode">According to Wikipedia</a>, we will need to provide 6 different methods, but for this problem we will take a little shortcut. Rather than use a <em>first()</em> and a <em>next()</em> method to generate the search tree of possible solutions, we will define an <em>extensions()</em> generator which will find all possible extensions, which add a single code point to a partial Gray code.</p>

        <h3>root(#bits)</h3>
        <p>Create the starting partial solution for some number of bits. To keep things easy, this will output a partial solution with the first codepoint as all zeros.</p>

<div class="highlight"><pre><span class="k">def</span> <span class="nf">makeroot</span><span class="p">(</span><span class="n">bits</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">[</span><span class="nb">tuple</span><span class="p">([</span><span class="bp">False</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">bits</span><span class="p">)])]</span>
</pre></div>


        <h3>reject(partial solution)</h3>
        <p>Returns <em>true</em> if the partial solution is not worth completing. For example, if more than one bit changes between consecutive code points.</p>
        <div class="highlight"><pre><span class="k">def</span> <span class="nf">hammingdistance</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="n">distance</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">j</span><span class="p">:</span>
            <span class="n">distance</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">distance</span>
<span class="k">def</span> <span class="nf">reject</span><span class="p">(</span><span class="n">code</span><span class="p">):</span>
    <span class="c"># No repeat codes</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">code</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">code</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">True</span>
    <span class="c"># Each consecutive code point must be one</span>
    <span class="c"># bit Hamming distance apart</span>
    <span class="k">for</span> <span class="n">c1</span><span class="p">,</span> <span class="n">c2</span> <span class="ow">in</span> <span class="n">consecutives</span><span class="p">(</span><span class="n">code</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">hammingdistance</span><span class="p">(</span><span class="n">c1</span><span class="p">,</span> <span class="n">c2</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
    <span class="k">return</span> <span class="bp">False</span>
</pre></div>

        <h3>accept(possibly full solution)</h3>
        <p>Accept returns <em>true</em> only when the given code is a full Gray code cycle.</p>
        <div class="highlight"><pre><span class="k">def</span> <span class="nf">accept</span><span class="p">(</span><span class="n">codelen</span><span class="p">,</span> <span class="n">code</span><span class="p">):</span>
    <span class="c"># Are we finished?</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">code</span><span class="p">)</span> <span class="o">!=</span> <span class="n">codelen</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="n">hammingdistance</span><span class="p">(</span><span class="n">code</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">code</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">==</span> <span class="mi">1</span>
</pre></div>

        <h3>extensions(partial solution)</h3>
        <p>Returns an iterator over all possible partial Gray codes which add a code point to the provided partial code.</p>
        <div class="highlight"><pre><span class="k">def</span> <span class="nf">extensions</span><span class="p">(</span><span class="n">code</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">code</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])):</span>
        <span class="n">nextcodepoint</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">code</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
        <span class="n">nextcodepoint</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">nextcodepoint</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">yield</span> <span class="n">code</span> <span class="o">+</span> <span class="p">[</span><span class="nb">tuple</span><span class="p">(</span><span class="n">nextcodepoint</span><span class="p">)]</span>
</pre></div>

        <h3>output(solution)</h3>
        For now, output the full code. Later, we will change this function to count the codes instead.
        <div class="highlight"><pre><span class="k">def</span> <span class="nf">output</span><span class="p">(</span><span class="n">code</span><span class="p">):</span>
    <span class="k">print</span> <span class="s">"code:"</span>
    <span class="k">for</span> <span class="n">codepoint</span> <span class="ow">in</span> <span class="n">code</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">codeelement</span> <span class="ow">in</span> <span class="n">codepoint</span><span class="p">:</span>
            <span class="n">codechar</span> <span class="o">=</span> <span class="s">"1"</span> <span class="k">if</span> <span class="n">codeelement</span> <span class="k">else</span> <span class="s">"0"</span>
            <span class="k">print</span> <span class="n">codechar</span><span class="p">,</span>
        <span class="k">print</span>
</pre></div>

        <h3>backtrack(partial solution)</h3>
        Backtrack does the actual search. See that it looks very similar to depth-first search in the way it uses recursion.
<div class="highlight"><pre><span class="k">def</span> <span class="nf">backtrack</span><span class="p">(</span><span class="n">codelen</span><span class="p">,</span> <span class="n">code</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">reject</span><span class="p">(</span><span class="n">code</span><span class="p">):</span>
        <span class="k">return</span>
    <span class="k">if</span> <span class="n">accept</span><span class="p">(</span><span class="n">codelen</span><span class="p">,</span> <span class="n">code</span><span class="p">):</span>
        <span class="n">output</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="k">for</span> <span class="n">extension</span> <span class="ow">in</span> <span class="n">extensions</span><span class="p">(</span><span class="n">code</span><span class="p">):</span>
        <span class="n">backtrack</span><span class="p">(</span><span class="n">codelen</span><span class="p">,</span> <span class="n">extension</span><span class="p">)</span>
</pre></div>


        <h2>Let's try backtracking out.</h2>
        <p>What are the possible Gray codes when we have 2 bits and want the full length-4 cycles?</p>
        <div class="cell border-box-sizing code_cell">
<div class="input">
<div class="input_area box-flex1">
<div class="highlight"><pre><span class="n">backtrack</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">makeroot</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</pre></div>

</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>
<div class="box-flex1 output_subarea output_stream output_stdout">
<pre>code:
0 0
1 0
1 1
0 1
code:
0 0
0 1
1 1
1 0

</pre>
</div>
</div>

</div>
</div>

</div>

        <h2>Making it count.</h2>
        <p>The number of Gray codes is going to blow up very quickly, so let's change the output to count instead of print all the results.  Since I used <a href="http://ipython.org/notebook.html">the IPython notebook</a> rather than writing a script or Python library, I was a bit sloppy and put the count in a global variable. This mean we will need to reset the count between calls.</p>
        <div class="highlight"><pre><span class="n">number_of_gray_codes</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">def</span> <span class="nf">output</span><span class="p">(</span><span class="n">code</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">number_of_gray_codes</span>
    <span class="n">number_of_gray_codes</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="k">def</span> <span class="nf">resetoutput</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">number_of_gray_codes</span>
    <span class="k">print</span> <span class="n">number_of_gray_codes</span>
    <span class="n">number_of_gray_codes</span> <span class="o">=</span> <span class="mi">0</span>
</pre></div>

        <p>Now, we can run <em>backtrack</em> to see how many different Gray codes there are.</p>
<div class="cell border-box-sizing code_cell">
<div class="input">
<div class="prompt input_prompt">
In [12]:
</div>
<div class="input_area box-flex1">
<div class="highlight"><pre><span class="n">backtrack</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">makeroot</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="n">resetoutput</span><span class="p">()</span>
</pre></div>

</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>
<div class="box-flex1 output_subarea output_stream output_stdout">
<pre>2

</pre>
</div>
</div>

</div>
</div>

</div>

        <p>Well, we knew that there were two Gray codes for 2 bits already. What if we had a few more bits to play with, but still wanted to keep the cycle length at 4?</p>

<div class="cell border-box-sizing code_cell">
<div class="input">
<div class="prompt input_prompt">
In [13]:
</div>
<div class="input_area box-flex1">
<div class="highlight"><pre><span class="n">backtrack</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">makeroot</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="n">resetoutput</span><span class="p">()</span>
</pre></div>

</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>
<div class="box-flex1 output_subarea output_stream output_stdout">
<pre>6

</pre>
</div>
</div>

</div>
</div>

</div>

        <p>Now, what if we get the maximum lenght cycle for this number of bits?</p>

<div class="cell border-box-sizing code_cell">
<div class="input">
<div class="prompt input_prompt">
In [14]:
</div>
<div class="input_area box-flex1">
<div class="highlight"><pre><span class="n">backtrack</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">3</span><span class="p">,</span> <span class="n">makeroot</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="n">resetoutput</span><span class="p">()</span>
</pre></div>

</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>
<div class="box-flex1 output_subarea output_stream output_stdout">
<pre>12

</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell">
<div class="input">
<div class="prompt input_prompt">
In [15]:
</div>
<div class="input_area box-flex1">
<div class="highlight"><pre><span class="n">backtrack</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">4</span><span class="p">,</span> <span class="n">makeroot</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>
<span class="n">resetoutput</span><span class="p">()</span>
</pre></div>

</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>
<div class="box-flex1 output_subarea output_stream output_stdout">
<pre>2688

</pre>
</div>
</div>

</div>
</div>

</div>

        <p>
            That grew fast! I also tried running this for 5 bits, but I “Ctrl-C”ed to cancel the computation because I got impatient waiting for an answer. It <a href="http://oeis.org/A003042">turns out</a>, that for 5 bits the answer is 1,813,091,520 which is a lot more than 2,688. No wonder it was taking so long!
        </p>


        <h2>What's the point of all this?</h2>
        <p>
            If we could find the answer on <a href="http://oeis.org/">OEIS,</a> what was the point of calculating it using backtracking? Firstly, backtracking is a very useful technique to know for searching solution spaces. Secondly, we were able to find Gray codes for non-power-of-two length cycles. We discovered that there are 6 gray codes of length 4 using 3 bits for the code points.
        </p>
        <p>
            Lastly, now that we have this framework, we can adjust our <em>accept</em> and <em>reject</em> functions to find other, more-specific kinds of Gray codes. For example, it would be interesting to see some Gray codes which can be flood-filled and to learn how many such codes there are.
        </p>
        <img alt="A Gray code of length 6 using 3 bits which can be flood filled in the 0s. {000, 001, 011, 010, 110, 100}" src="/blog/2013/12/29/finding-gray-codes-with-backtracking-in-python/flood-fill-gray-code.jpg" width="100%"/>

      ]]></description>
      <pubDate>Sun, 29 Dec 2013 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2013/12/29/finding-gray-codes-with-backtracking-in-python/</guid>
      <link>https://www.timswast.com/blog/2013/12/29/finding-gray-codes-with-backtracking-in-python/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Why are collections of computer code called libraries?</title>
      <description><![CDATA[
        
<p class="e-summary">My wife is an <a href="http://en.wikipedia.org/wiki/Archivist">archivist</a>. As a library
professional, one of her peeves is when technology workers, such as myself,
use <a href="http://en.wikipedia.org/wiki/Library_(computing)">library to
mean a collection of computer code</a>. Because computer code libraries
generally are not managed by a librarian, the term seems misapplied.
</p>

<p> I was surprised to read in John G. Kemeny's <a href="http://www.amazon.com/gp/product/0684130092/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0684130092&amp;linkCode=as2&amp;tag=thnebetu-20">Man
and the Computer</a><img alt="" border="0" height="1" src="http://ir-na.amazon-adsystem.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=0684130092" style="border:none !important;
margin:0px !important;" width="1"/> the term library applied to collections of
computer code. In 1972 computer code collections had not grown to <a href="https://github.com/blog/1382-three-million-users">millions of
repositories</a> to which today's programmers have access, but amount
of code was growing.
</p>

<p> Since Kemeny is an inventor of BASIC, which has a <a href="http://www.truebasic.com/node/1040">LIBRARY</a> keyword, I probably
should not have been surprised by this. Mostly, it feels just a bit strange
that the term library has been used for collections of reusable code just
about as long as collections of reusable computer code have existed!
</p>

      ]]></description>
      <pubDate>Mon, 21 Oct 2013 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2013/10/21/why-are-collections-of-computer-code-called-libraries/</guid>
      <link>https://www.timswast.com/blog/2013/10/21/why-are-collections-of-computer-code-called-libraries/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>An introduction to Markov chains with mathematical art</title>
      <description><![CDATA[
        
<p class="e-summary">In this post, you'll use Markov chains to generate
artworks and analyze the distributions of colors. This post contains
interactive elements and is best experienced with a web browser at the <a href="/blog/2013/08/07/markov-chains-tutorial/">original post</a>.</p>

<p>A Markov chain generates a random sequence of states; it is a
stochastic model which changes state over discrete time. It has a set
of states, a matrix of transition probabilities, and its transitions
depend only on the current state and not further history.
</p>

<p>Play with this JavaScript widget I have written. States are represented
by colors and follow a <a href="http://en.wikipedia.org/wiki/Hilbert_curve">Hilbert curve</a> to fill
the image.. Transition probabilities are shown as per-thousands. If the sum
of the row is less than 100%, the remaining probability adds to the
transition keeping the state the same.
</p>

 <form name="myForm">
     <table>
         <tbody><tr>
             <td></td>
             <td>To 1</td>
             <td>To 2</td>
             <td>To 3</td>
             <td>To 4</td>
             <td>To 5</td>
         </tr>
         <tr ng-repeat="row in transitionMatrix">
             <td>State {{$index + 1}}</td>
             <td ng-repeat="cell in row.transitions">
                 <input max="1000" min="0" ng-model="cell.value" type="number"/>
             </td>
             <td>
                 <input ng-model="row.color" type="text"/>
                 <div style="background-color: {{row.color}}; width: 1em"> </div>
             </td>
         </tr>
     </tbody></table>
     Initial state: <input max="5" min="1" name="initialState" ng-model="initialState" required="" type="number"/>
     <button ng-click="reset()">Redraw with current T</button>
</form>

<canvas height="512" id="tutorial" width="512"></canvas>

<p>
    We can define Markov chains formally as well. Assume we have a set of \(n\) states,
</p>
\[
S = \{ 1, 2, 3, \dots, n \}.
\]
<p>
    The Markov chain generates a random sequence,
</p>
\[
\{x_1, x_2, \dots, x_k, x_{k+1}, \dots \}.
\]
<p>
    The probabilities of \(x_1\) being in any particular state follow an initial distribution, \(\{a_k\}.\) State transitions depend only on the previous state, that is, we only care about the conditional probabilities,
</p>
\[ P[x_{m+1}=j | x_{m}=i], \forall i,j \in S. \]
<p>
    Therefore, we can represent a Markov chain by its transition matrix,
</p>
\[ T =
\begin{pmatrix} p_{11} & p_{12} & \dots & p_{1n}\\
\vdots & \vdots & \ddots & \vdots\\
p_{n1} & p_{n2} & \dots & p_{nn}\end{pmatrix}, \]
<p>
    where \(p_{ij} = P[x_{m+1}=j | x_{m}=i].\)
</p>

<h1>Applications of Markov chains</h1>

<p>Besides being useful for making somewhat unique artwork, Markov chains
are reasonable models of many real-world processes. For example, James
Montgomery shows how they can be used to model <a href="http://www.ssc.wisc.edu/~jmontgom/markovchains.pdf">Social mobility</a>
in his textbook on Mathematical Models of Social Systems. </p>

<p>In the social mobility model, time represents the generation and the
state represents the social class. Transition properties represent the
probability that offspring will be of a certain class given the parents'
social class. Even though this model does not represent population growth
through reproduction, it is a good first approximation.

</p><h1>Analysis of Markov chains.</h1>
<p>By the way states are updated, we can see that the distribution for
states at step \(i\) will be

</p><p>
\[ a T^i, \]

</p><p>where \(a\) is the initial distribution represented as a row vector, and
\(T\) is the transition probabilities matrix.

</p><p>In many Markov chains, this distribution tends toward something called a
stationary distribution, \(\pi.\) Where,

</p><p>
\[ a T^i \to \pi = \pi T. \]

</p><p>Note that \(\pi\) is invariant when multiplied by the transition matrix,
\(T.\) This is why it is called a stationary distribution. </p>

<h2>How will the colors be distributed in a particular drawing?</h2>
<p> We can try finding the stationary distribution of the example transition
matrix first shown on this page. </p>

<p>
\[ T = \begin{pmatrix}
0.99 &amp; 0.01 &amp; 0 \\
0.01 &amp; 0.98 &amp; 0.01 \\
0.01 &amp; 0    &amp; 0.99
\end{pmatrix} \]

</p><p>
    In Matlab, we can try various powers of \(T\) to see toward which distribution it may converge.
</p>
<pre><code>EDU&gt;&gt; a = [ 1 0 0 ];
EDU&gt;&gt; T = [ .99 .01 0
.01 .98 .01
.01 0   .99];

EDU&gt;&gt; a*T
ans =
    0.9900    0.0100         0

EDU&gt;&gt; a*T^2
ans =
    0.9802    0.0197    0.0001

EDU&gt;&gt; a*T^20
ans =
    0.8338    0.1512    0.0150

EDU&gt;&gt; a * T^100
ans =
    0.5663    0.2845    0.1492

EDU&gt;&gt; a * T^200
ans =
    0.5088    0.2635    0.2277

EDU&gt;&gt; a * T^400
ans =
    0.5002    0.2506    0.2493

EDU&gt;&gt; a*T^1000
ans =
    0.5000    0.2500    0.2500
</code></pre>
<p>
    We can see that the Markov chain will end up with about \(1/2\) in state 1, and \(1/4\) each in states 2 and 3.
</p>

<p>
    You can try this out on the current transition matrix by entering the following in Matlab.
</p>
<div style="font-family: monospace;">
    EDU&gt;&gt; a = [<span ng-repeat="iterState in [1,2,3,4,5]">
    {{ 1.0 * (initialState == iterState)}}
    </span>
    ];<br/>
    EDU&gt;&gt; T = [...
    <div ng-repeat="row in transitionMatrix">
        <span ng-repeat="cell in row.transitions">
            {{cell.value / 1000}}
        </span>
    </div>
    ];<br/>
    EDU&gt;&gt; a * T^1000<br/>
    ans = ???
</div>


<h2>But proportions aren't everything...</h2>
<p>
    Consider the following transition matrices.
</p>

<p>
\[ A = \begin{pmatrix}
0.01 &amp; 0.99 \\
0.99 &amp; 0.01
\end{pmatrix} \]

<img alt="a nearly checkerboard drawing." src="/blog/2013/08/07/markov-chains-tutorial/two-state-alternate.png"/>
</p><pre><code>EDU&gt;&gt; a = [1 0];
EDU&gt;&gt; T = [0.01 0.99
0.99 0.01];

EDU&gt;&gt; a * T^10000
ans =
    0.5000    0.5000</code></pre>

<p>
\[ B = \begin{pmatrix}
0.5 &amp; 0.5 \\
0.5 &amp; 0.5
\end{pmatrix} \]

<img alt="random white noise." src="/blog/2013/08/07/markov-chains-tutorial/two-state-noise.png"/>

</p><pre><code>EDU&gt;&gt; a = [1 0];
EDU&gt;&gt; T = [0.5 0.5
0.5 0.5];

EDU&gt;&gt; a * T^10000
ans =
    0.5000    0.5000</code></pre>

<p>
\[ C = \begin{pmatrix}
0.99 &amp; 0.01 \\
0.01 &amp; 0.99
\end{pmatrix} \]
<img alt="choice of colors is sticky." src="/blog/2013/08/07/markov-chains-tutorial/two-state-sticky.png"/>
</p><pre><code>EDU&gt;&gt; a = [1 0];
EDU&gt;&gt; T = [0.99 0.01
0.01 0.99];

EDU&gt;&gt; a * T^10000
ans =
    0.5000    0.5000</code></pre>

        <p>
            The results of these transition matrices look very different, and yet their long-run distributions are the same, with half the time spent in each state. What is clearly different is how long it takes before the Markov chain transitions from state 1 to state 2. (Note that since the transition matrices are symmetric, this is the same as saying the time for it to transition from state 2 to state 1.)
        </p>

        <p>
            David Anderson shows a method for finding the average time to transition between states on page 75-78 of Chapter 3 in
            <a href="http://www.math.wisc.edu/~anderson/605F13/605F13.html">
                Stochastic Methods for Biology.
            </a> First, consider the the ending state to be absorbing.
        </p>
        \[  \begin{pmatrix}
        0.99 & 0.01 \\
        0.01 & 0.99
        \end{pmatrix} \to
        \begin{pmatrix}
        0.99 & 0.01 \\
        0    & 1
        \end{pmatrix}
        \]

        <p>
            Next, we can rearrange the matrix such that the transitional states are grouped together in a substochastic submatrix, \(Q\).
        </p>
        \[
            \begin{pmatrix}
            1    & 0 \\
            0.01 & 0.99
            \end{pmatrix},
            Q = \begin{pmatrix}
            0.99
            \end{pmatrix}
        \]
        <p>
            We can then take the inverse of the matrix I - Q to find the number of visits if starting on the state corresponding to the row. Since there is just one transitional state in this example, it is quite easy to do, since the submatrix is actually just a scalar.. \((1 - 0.99)^{-1} = 100\). That is, if we start in state 1, the expected value for the time to leave state 1 is 100 time steps.
        </p>

        <h2>Another example of expected visits.</h2>
        <p>
            Consider this three-state Markov chain transition matrix.
        </p>
        \[ T = \begin{pmatrix}
        0.01 & 0.99 & 0 \\
        0    & 0.01 & 0.99 \\
        0.99 & 0    & 0.01
        \end{pmatrix} \]
        <p>
            It generates a picture like this.
        </p>
        <img alt="Something like a three-color checkerboard." src="/blog/2013/08/07/markov-chains-tutorial/three-state-alternate.png"/>
        <p>
            How long will it take to transition to pink?
        </p>
        \[
            \begin{pmatrix}
            0.01 & 0.99 & 0 \\
            0    & 0.01 & 0.99 \\
            0.99 & 0    & 0.01
            \end{pmatrix}
            \to
            \begin{pmatrix}
            0.01 & 0.99 & 0 \\
            0    & 0.01 & 0.99 \\
            0    & 0    & 1
            \end{pmatrix}
        \]
        <p>
            Rearrange to put state 3 in the upper-left.
        </p>
        \[
            \begin{pmatrix}
            1    & 0    & 0 \\
            0    & 0.01 & 0.99 \\
            0.99 & 0    & 0.01
            \end{pmatrix},
            Q = \begin{pmatrix}
            0.01 & 0.99 \\
            0    & 0.01
            \end{pmatrix}
        \]
        <p>
            Use Matlab to find \((I - Q)^{-1}\).
        </p>
        <pre><code>EDU&gt;&gt; Q = [0.01 0.99
0 0.01];
EDU&gt;&gt; (eye(2) - Q)^-1
ans =
    1.0101    1.0101
         0    1.0101
</code></pre>
        <p>
            So, if we start in state 1, we expect to spend \(\approx 1.01\) time steps in each of states 1 and 2. Thus, we expect to spend just over 2 time steps to  transition from state 1 to state 3.
        </p>

        <h1>References</h1>

        <p>
            This project was built using HTML and JavaScript. It depends on a library called MathJax to convert LaTeX equations into pretty HTML. For graphics, it uses AngularJS to bind values to elements of the page, and it uses the HTML5 web canvas to color individual pixels dynamically.
        </p>
        <ul>
            <li>
                MathJax -
                <a href="http://www.mathjax.org/">
                    http://www.mathjax.org/
                </a>
            </li>
            <li>
                AngularJS -
                <a href="http://angularjs.org/">
                    http://angularjs.org/
                </a>
            </li>
            <li>
                HTML5 web canvas documentation -
                <a href="https://developer.mozilla.org/en-US/docs/HTML/Canvas">
                    https://developer.mozilla.org/en-US/docs/HTML/Canvas
                </a>
            </li>
        </ul>

        <p>
            More information about the mathematics of Markov chains is available here:
        </p>
        <ul>
            <li>
                Anderson, David.
                <a href="http://www.math.wisc.edu/~anderson/605F13/605F13.html">
                Stochastic Methods for Biology.
                </a> 2013</li>
            <li>
                Montgomery, James.
                <a href="http://www.ssc.wisc.edu/~jmontgom/376textbook.htm">
                    Mathematical Models of Social Systems
                </a>
            </li>
            <li>
                Resnick, Sidney I.
                <em>Adventures in stochastic processes.</em>
                Boston: Birkhäuser, 1992. Print.
                p60-173.
            </li>
        </ul>



        <script>
            // window.requestAnimationFrame is useful when creating
            // programmatic animations, but it is not supported in all browsers.
            // Paul Irish provides this shim layer with setTimeout fallback.
            // http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
            window.requestAnimFrame = (function(){
              return  window.requestAnimationFrame       ||
                      window.webkitRequestAnimationFrame ||
                      window.mozRequestAnimationFrame    ||
                      function( callback ){
                        window.setTimeout(callback, 1000 / 60);
                      };
            })();


        // Functions for working with Hilbert Curves.
        // Copied from Wikipedia.
        // http://en.wikipedia.org/wiki/Hilbert_curve#Applications_and_mapping_algorithms
        //convert d to (x,y)
        // n is the length of a side of the square being filled
        function d2xy(n, d) {
            var rx, ry, s,
                t=d,
                o = {};
            o.x = o.y = 0;

            for (s=1; s<n; s=s*2) {
                rx = 1 & (t/2); // note (& and ^) are bitwise operators.
                ry = 1 & (t ^ rx);
                rot(s, o, rx, ry);
                o.x += s * rx;
                o.y += s * ry;
                t /= 4;
            }
            return o;
        }

        //rotate/flip a quadrant appropriately
        function rot(n, o, rx, ry) {
            if (ry == 0) {
                if (rx == 1) {
                    o.x = n-1 - o.x;
                    o.y = n-1 - o.y;
                }

                //Swap x and y
                var t  = o.x;
                o.x = o.y;
                o.y = t;
            }
        }

            // How should we represent a Markov chain?
            // There are some number of states. These each have an associated color.
            colors = [
                "#ffffff",
                "#000000",
                "rgba(100, 0, 200, 1.0)",
                "rgba(200, 0, 100, 1.0)",
                "rgba(250, 150, 0, 1.0)"
            ];
            transitionMatrix = [
                [0.1, 0.9],
                [0.1, 0.9]
            ];
            currentstate = 0;
            function updateMarkovChain() {
                var transitionSample = Math.random(),
                    previousTransitions = 0,
                    i = 0,
                    transitions = transitionMatrix[currentstate];

                for (i in transitions) {
                    previousTransitions += transitions[i];
                    if (transitionSample <= previousTransitions) {
                        currentstate = i;
                        break;
                    }
                }
            }

            // Start drawing to the canvas.
            // See the tutorial at
            // https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Canvas_tutorial/Basic_usage
            currentstep = 0;
            function step(timestamp) {
                var canvas = document.getElementById('tutorial');
                var ctx = canvas.getContext('2d');

                for (var i=0 ; i < 64 ; i++) {
                    // Draw.
                    var pos = d2xy(512, currentstep);
                    ctx.fillStyle = colors[currentstate];
                    ctx.fillRect (pos.x, pos.y, 1, 1);

                    // Get next state.
                    currentstep = currentstep + 1;
                    updateMarkovChain();
                }

                // keep animating.
                if (currentstep < 512*512) {
                    window.requestAnimFrame(step);
                }
            }
            window.requestAnimFrame(step);
        </script>

<p> This post was created as part of a project for <a href="http://www.math.tamu.edu/~mpilant/math696/Summer-2013-Syllabus.html">
Texas A&amp;M Math 696. </a>
</p>
      ]]></description>
      <pubDate>Wed, 07 Aug 2013 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2013/08/07/markov-chains-tutorial/</guid>
      <link>https://www.timswast.com/blog/2013/08/07/markov-chains-tutorial/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Quadratic Equations in Physics</title>
      <description><![CDATA[
        
<p class="e-summary">In this post, you'll learn how initial velocities affect
the trajectories of projectiles. This post contains interactive elements and
is best experienced with a web browser at the <a href="/blog/2013/08/04/quadratic-equations-in-physics/">original
post</a>.</p>

<p>Let's pull out our virtual slingshots for a moment and see just how far
we can fling a pebble. A slingshot gives the pebble an initial velocity and
the pebble is in freefall thereafter. Play with the velocity and see how the
trajectory changes.
</p>

<embed height="400" script='
    initPicture(-1,16,-1,16)
    axes()
    a = 3
    b = 4
    stroke = "blue"
    update()
    ' src="d.svg" width="400"/>
<script>
function update() {
    g = -9.81;
  plot(function (x){
      t = (1/b) * x;
      return g/2*t*t+a*t},"cubic")
  setText(a,"aval");
  setText(b,"bval");
  setText(a*a + b*b, "energyval");
}
</script>
<br/>
<input onclick="a--;update()" type="button" value="-"/>
<i>y'</i> = <span id="aval"></span> `m / s`
<input onclick="a++;update()" type="button" value="+"/>
<br/>
<input onclick="b--;update()" type="button" value="-"/>
<i>x'</i> = <span id="bval"></span> `m / s`
<input onclick="b++;update()" type="button" value="+"/>
<br/>
kinetic energy ~ <span id="energyval"></span> Joules


<h2>What is happening here?</h2>

<p> The shape of the trajectory stays the same no matter how hard it is
thrown. By increasing x' the shape stretches out, and by increasing y' the
shape shifts up. Still it looks more-or-less the same.

 </p><p> This shape is called a parabola, and it is generated by a quadratic
 equation. In fact, it is generated by this quadratic equation `t = 1/{x'} *
 x; y = g/2 * t^2 + y' * t,` where `t` is time and `g` is the constant
 acceleration due to gravity. Translated into ASCIIsvg JavaScript, it looks
 like this:

 </p><pre><code>
 g = -9.81;
 plot(function (x) {
     t = (1/b) * x;
     return g/2*t*t+a*t
 }, "cubic")
 </code></pre>


        <h2>Where did that come from?</h2>
        <p>
            The quadratic solution follows directly from the assumption of constant acceleration.
        </p>
        `y'' = g`

        <p>
            From this we can integrate with respect to the time to find the vertical velocity.
            `y' = int g dt.`
            `y' = g t + C` where `C` is the initial velocity, since `y'(0) = C`.
        </p>

<p> Once we know the velocity across time, we can solve for the position. `y
= int g t + y'(0) dt.` `y = g/2 t^2 + y'(0) t + C` where `C` here is the
initial position, which we assume to be 0. </p>

<p> What about `x`? Gravity does not affect the `x` portion of the velocity,
since it only accelerates <em>downward.</em> Therefore, `x'` is constant.
Integrating, `x = int x' dt = x' t + C.` Since we can assume the slingshot
shoots from the origin, `C` here is 0. </p>

<p> Note that `x` has been solved to be just a constant factor of the time
`t.` Therefore, it makes sense to solve for the time first in the plots and
then solve for the height.

</p><pre><code>
g = -9.81;
plot(function (x) {
    t = (1/b) * x;
    return g/2*t*t+a*t
}, "cubic")
</code></pre>

<h2>Where does the pebble hit the ground?</h2>

<p> The pebble hits the ground when `y = 0.` In the previous sections we have
already derived an equation of `y` with respect to time `t`. `y(t) = g/2 t^2
+ y'(0) t.`

</p><p> The first thing to do is to figure out <em>when</em> the pebble will hit
the ground. Since `t` factors out, we needn't even pull out the quadratic
equation. `y(0) = t (g/2 t + y'(0))` Thus. `t = 0` or `t = { -y'(0) 2/g } = {
y'(0) 2/9.81 }` if `g = -9.81.` </p>

<p>Once we have when it hits, it is easy to find where it hits. Since the
x-velocity remains constant, `x = x' t.` Just multiply the x-velocity by the
time to find where!

</p><p> This post was created as part of project 4 for
<a href="http://www.math.tamu.edu/~mpilant/math696/Summer-2013-Syllabus.html">Texas
A&amp;M Math 696. </a>
This project is based on the the <a href="http://www1.chapman.edu/~jipsen/svg/asciisvgsample.html">ASCIIsvg
example file</a>.
</p>
      ]]></description>
      <pubDate>Sun, 04 Aug 2013 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2013/08/04/quadratic-equations-in-physics/</guid>
      <link>https://www.timswast.com/blog/2013/08/04/quadratic-equations-in-physics/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>A demonstration of the law of large numbers</title>
      <description><![CDATA[
        
<h2>What is randomness?</h2>

<p class="e-summary">Random is part of our everyday language. We say
something is random when it is unpredictable, unexpected, or out of the
ordinary. Mathematics provides a framework for understanding some of these
unpredictable events called <em>probability theory</em>. </p>

<h2>Can I get an example?</h2>

<p>Dice, cards, coin flips, spinners are common examples of randomizing
tools we use in board games and gambling. We use them <em>because</em> they
are unpredictable. A fair, six-sided dice will generate a number from one to
six with an equal probability of each number. Similarly, we consider coin
flip to be fair if there is an equal probability of arriving at heads or
tails.
</p>

<img alt="an example of a sequence of coin flips." src="/blog/2013/07/28/animated-demonstration-of-probability/coin_flip.gif"/>

<p>This sequence was generated by a simulated fair coin using Matlab. I use
the rand() method to generate coin flips of any probability for heads in <a href="/blog/2013/07/28/animated-demonstration-of-probability/coin_flip.m">coin_flip.m</a>
</p>

<pre><code>EDU&gt;&gt; coin_flip
enter p, the probability of heads (-1 to exit): 0.5
enter t, the total number of trials: 16
</code></pre>

<h2>That didn't look random to me.</h2>

<p>Note that even though there are some long sequences of tails in the text
example, each coin flip is independent from all other coin flips. There may
be short sequences that may not match expectations, but in the long run there
will be half heads and half tails. This chart shows the proportion of heads
over a sequence of 800 fair coin flips.
</p>

<img alt="in the long run, the proportion of heads matches the probability." src="/blog/2013/07/28/animated-demonstration-of-probability/probability_measure.gif"/>

<p> This is actually a way of defining the probability of an event for a
given system. An event <em>E</em> is said have a probability <em>P[E] =
p</em> if it appears with proportion <em>p</em> in as the sequence generated
by the system grows to infinite length.
</p>

<aside>(Those who have taken Texas A&amp;M Math 614, Dynamical Systems and
Chaos, may recognize this as very similar to the <em>fraction</em> of
iterates of an orbit lying in a set, as part of the <em>natural measure</em>
definition. Probabilities are also defined as a natural measure, but a
measure of system containing random variables.)</aside>

<h2>Let's play a game.</h2>

<p>Flip a coin. If it is heads, I pay you $1. If it is tails you pay me $1.
What does your bank account look like with such a game?
</p>

<img alt="the random walk of your monies." src="/blog/2013/07/28/animated-demonstration-of-probability/random_walk.gif"/>
<p>
The path your bank account takes follows a <a href="/blog/2013/07/28/animated-demonstration-of-probability/random_walk_automatic.m">random walk.</a>
</p>
<pre><code>EDU&gt;&gt; random_walk_automatic
enter p, the probability of heads (-1 to exit): 0.5
enter t, the total number of trials: 100</code></pre>

<p> Looking at this example of 100 coin flips, it is hard to say much. It
seems intuitive that since you and I have the same chance of winning with
each step, in the long run it should be effectively even. This brings us to
the idea of <em>expected value.</em>
</p>


<h2>We expect what, exactly?</h2>

<p>Since we have assigned values to different events, $1 for heads and $-1
for tails, we can ask "What is average value?" That is, if we repeated this
game for a long time, what would be the average change of money be per game?
For any finite number of coin flips, this average is called the <em>sample
average.</em>
</p>

<p>There is a theorem called <em>the law of large numbers.</em> The gist of
it is that as the number of flips increases, the <em>sample average</em> will
get closer and closer to something called the <em>expected value</em>. For a
coin flip, we calculate the expected value by <em>(1)(p) + (-1)(1-p).</em>
</p>

<p> To calculate expected value for discrete events, like dice rolls and coin
flips, we multiply the value by the probability and add up all possibilities.
</p>

<img alt="\sum_S v_s P[S]" src="/blog/2013/07/28/animated-demonstration-of-probability/law-of-large-numbers-discrete.png"/>

<p> So, for our example, we have <em>(1)(.5) + (-1)(.5),</em> which equals
<em>0.</em> That means, if we do a long enough experiment, the average value
each coin flip should be about <em>0.</em>
</p>

<img alt="large numbers, goes to zero." src="/blog/2013/07/28/animated-demonstration-of-probability/large_numbers.gif"/>

<pre><code>EDU&gt;&gt; large_numbers
enter p, the probability of heads (-1 to exit): 0.5
enter t, the total number of trials: 800
enter the value associated with heads: 1
enter the value associated with tails: -1</code></pre>

<p> You can experiment with different probabilies, numbers of trials, and
values with <a href="/blog/2013/07/28/animated-demonstration-of-probability/large_numbers.m">large_numbers.m</a>. For example, we
can measure probabilies using the law of large numbers with what is called a
<em>flag function. Set the value to 1 for the event you want to measure, e.g.
heads and set the value to 0 for all other events.</em>
</p>

<pre><code>EDU&gt;&gt; large_numbers
enter p, the probability of heads (-1 to exit): 0.5
enter t, the total number of trials: 800
enter the value associated with heads: 1
enter the value associated with tails: 0</code></pre>

      ]]></description>
      <pubDate>Sun, 28 Jul 2013 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2013/07/28/animated-demonstration-of-probability/</guid>
      <link>https://www.timswast.com/blog/2013/07/28/animated-demonstration-of-probability/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Creating a new form of digital ownership</title>
      <description><![CDATA[
        
<p class="e-summary">Why is it that we <a href="http://youtu.be/E_9R45RLNR0">buy digital hats</a> but not blog posts or
web comics? <a href="http://store-xkcd-com.myshopify.com/">Some</a> <a href="http://shop.theoatmeal.com/">artists</a> make money by selling physical
items like posters or t-shirts, but for all-digital content it seems that the
only options of monetizing them are through paywalls or advertising. </p>

<img alt="TF2 hats" src="/blog/2013/06/28/creating-a-new-form-of-digital-ownership/hats.jpg"/>

<p> I have a few problems with applying these models to my content. By
requiring payment to view it, whatever price I set it to, some people won't
be able to see it. Advertising has many problems : for small sites like mine,
I would gain no measurable benefit in exchange losing control of my site. If
I were to retain control and decide which advertisers to work with, I then
become part of Chomsky's propoganda model, <em>self-censoring</em> myself to
please <em>advertisers.</em> </p>

<h2>A proposal</h2>

<p> There are other ways. For printed art, atists often mark their works with
a print or edition number. Potentially, we could do this for blog posts and
other digital content by tying a sequence number to a digital currency like
bitcoin. </p>

<img alt="blog post ; 42 of unlimited" src="/blog/2013/06/28/creating-a-new-form-of-digital-ownership/blog-with-edition-number.jpg"/>

<p> This would allow for even more flexibility than with physical art. Since
we can track the whole chain of ownership of a particular edition, we can pay
the original author whenever it is sold. By paying the original author, say
30% of the selling price, for each transfer we can keep the original, 1st
edition, at a low price without worrying that it will immediately be sold for
much more! </p>

<h2>How might it work?</h2>

<p>Since bitcoin and similar currencies create a linear block chain of
transactions with transactions appearing in some order in each block, we
could simply use the convention that each piece of content is assigned a new
address. Any payments to this address will be ordered in some way. Thus, the
first to pay would own the first edition by convention.</p>

<p> A big problem with the ownership by convention method is that editions
cannot be resold. Instead, it would be better to create something like
namecoin, where names can be bought but then editions of those names can be
sold and resold. This would give the most flexibility. If the "names" were
hashes of the document being traded, perhaps this could double as a P2P
distribution method as well? </p>

<h2>The way forward</h2>

<p> One could pretty easily implement such a monetization method in a
centralized way. Either each individual content creator runs their own store
or a company offers to sell editions as a service. In my opinion, I doubt I
would feel nearly as much personal ownership of an edition with a centralized
solution as I would in a P2P system I partially control. Perhaps then, the
next step is to fork bitcoin, namecoin, ... and start implementing? If we
build it, will people use it? </p>

      ]]></description>
      <pubDate>Fri, 28 Jun 2013 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2013/06/28/creating-a-new-form-of-digital-ownership/</guid>
      <link>https://www.timswast.com/blog/2013/06/28/creating-a-new-form-of-digital-ownership/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Introducing Ssite: An Engine for Handwritten Static Sites</title>
      <description><![CDATA[
        
<p><b>Update: <time class="dt-updated" datetime="2018-07-21">July 21,
2018</time>:</b>
<em>I have posted a <a href="/blog/2018/07/21/5-years-of-ssite/">retrospective of 5 years using
ssite</a> with more details on how I'm using it and why. Previously this page
announced a tool called Locoloco. That name was not respectful of those with
mental illness. I have changed the name to ssite, which also better reflects
its purpose.</em>

</p><p class="p-summary">Say hello to ssite, the little blog engine that doesn't
do much. This past weekend I built a blog engine to keep my site organized.
It differs from existing engines in that it does much less. It generates an
index without templating or modifying the articles at all.</p>

<p>You can check out the code on <a href="https://github.com/tswast/ssite">GitHub.</a>

</p><h2>What's the point?</h2>
<p>For various reasons, I have decided to keep my blog as simple, static
HTML. There are many existing tools for this, such as the popular <a href="http://octopress.org/">Octopress</a>, <a href="http://jekyllrb.com/">Jekyll,</a> and <a href="http://hyde.github.io/">Hyde.</a> In these solutions, one writes
articles in plain text, <a href="http://daringfireball.net/projects/markdown/syntax">Markdown</a>, or a
template language of some sort. I would like to keep my blog articles as
plain HTML rather than generating them. Therefore, ssite generates an
index of the articles and nothing else.

</p><p>The reason for doing things this way is two-fold. First, it fits my
workflow better. I keep my blog synced to multiple computers on multiple
different platforms. It was a pain to keep the same versions of the
dependencies on Linux, Mac, and Windows.

</p><p>The most important reason I choose to keep the blog updated this way is
stability. I have observed that <a href="http://sprott.physics.wisc.edu/chaostsa/">sites from the 1990s</a>
which were written in plain HTML <a href="https://users.math.yale.edu/public_html/People/frame/Fractals/">still
work well today</a>, even if it may look a little dated, but sites that
depend on dynamic generation (including some of my early projects) are now
defunct. By keeping things simple, I hope to make it more likely that links
to sites that I built will continue to work long after I'm gone.

</p><h2>Getting started.</h2>

<p><b>Update: <time class="dt-updated" datetime="2018-07-21">July 21,
2018</time></b>:
These instructions no longer work with the latest version of ssite. Check out
the <a href="https://github.com/tswast/ssite">GitHub repository</a> for the
most recent instructions.

</p><p>Using ssite is pretty easy.<br/>
<code>blogindex.py $BLOGDIR</code><br/>
It should "just work" if you use the same date-based directory scheme of
<code>YYYY/MM/DD/post-title/index.html</code> that I do.
</p>
      ]]></description>
      <pubDate>Mon, 10 Jun 2013 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2013/06/10/introducting-locoloco-the-little-engine-that-didnt/</guid>
      <link>https://www.timswast.com/blog/2013/06/10/introducting-locoloco-the-little-engine-that-didnt/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>An Exploration of Chaos in Neural Networks</title>
      <description><![CDATA[
        
 Statement of the problem 
<p class="e-summary">
Neural networks are models of the brain. Actually, there are many different kinds of
neural network models. (<a href="/blog/2013/05/03/chaos-in-neural-networks/#ref-neural-history">Wallis</a>)
What they have in common is that they consist of nodes
(which model neurons) hooked together in some way. Signals then propogate through
the network.
</p>

<p>
I explore a special kind of neural network in which input and output values are
distributed over the states of many different “neurons.”
This reflects recent experiments which have shown that neurons use sparse
distributed representations in the olfactory bulb, for example
(<a href="/blog/2013/05/03/chaos-in-neural-networks/#ref-sdr-olfactory">Yu Y</a>). Specifically, I feed output
back in as input to explore the dynamics of such a network.
</p>

<h2>Related Work</h2>
<p>
With the variety of neural models, there have been many studies exploring the
dynamics of them.
J. C. Sprott has explored chaotic dynamics in networks which propogate
real numbers through each node (<a href="/blog/2013/05/03/chaos-in-neural-networks/#ref-sprott">Sprott</a>). The state of the system is a multidimensional
vector of the real-numbered states of the output nodes. In such a system,
he found that large networks were more likely to show chaotic dynamics than
small networks.
</p>

<p>
There are also neural network models which can be driven by a chaos. Researchers
in Tokyo have modified a type of neural network model called Boltzmann machines
to be driven by a chaotic function rather than stochastically. They then show that
such machines have useful properties when it comes to building machine learning
systems. (<a href="/blog/2013/05/03/chaos-in-neural-networks/#ref-boltzmann">Suzuki</a>)
</p>

<p>
Rather than using continuous / real-number inputs and outputs for nodes in a
neural network, there are also models which use discrete synapses.
(<a href="/blog/2013/05/03/chaos-in-neural-networks/#ref-discrete-synapses">Barrett</a>) A synapse
is a synonym for an edge in a neural network. Synapses connect nerves together.
It has been shown that discrete synapses are very efficient at recognition tasks
and that optimal sparsity of active nodes and optimal number of synapses per node
in the model are similar to the values from physical experiments.
</p>


<h2>Derivation of Mathematics</h2>
<p>
The neural network model used in this experiment is simply a fully-connected graph.
Nodes are either activated (1) or not (0).
Edges have weights in [0, 1]. If an edge weight is above some threshold <em>t</em>,
e.g. 0.5, activations will propogate, otherwise they do not.
</p>

<img alt="Fully connected graph with active nodes and only some edges propogating messages." src="/blog/2013/05/03/chaos-in-neural-networks/graph.png"/>

<p>
Each application of the network to an input consists of three steps.
</p>
<ol>
<li>
    The input maps to states on the nodes. Somehow we take a real number input
    and map it to a binary state for each of the nodes in the network.
</li>
<li>
    Activations propogate through the network. Imagine each node sending a "I'm activated"
    message through each of its edges with a weight greater than the threshold, <em>t</em>.
</li>
<li>
    Based on the number of messages recieved (possibly the number relative to the other nodes),
    activate the nodes as output. Nodes that receive a lot of activation messages will
    activate (enter state 1) and those that receive few or not will not activate (enter state 0).
</li>
</ol>


<h3>Step 1: Representations</h3>
<p>
There are many choices for mapping between the binary states of nodes and a real number.
We will see that this choice will actually affect the dynamics of the system. The reason
is that some mappings may only have O(N) representable states for a network with N nodes,
whereas others will have O(2<sup>N</sup>) representable states. This makes a big difference
when we try to find chaos in these models.
</p>

<p>
A simple sparse distributed representation for a number in [0, 1] is used in the
cortical learning algorithms.
“Think of a slider widget of width W on a track with N increments.”
(<a href="/blog/2013/05/03/chaos-in-neural-networks/#ref-grok-sensor-region">Grok</a>) To represent 0 we arrange the nodes
in a line and set the left-most W nodes to active. Similarly, to represent a 1,
we set the right-most W nodes to active.
</p>

<p>
A benefit of this approach is that numbers close to each other in magnitude will also
be close in Hamming distance. That is, if we treat the state of the nodes as bit strings,
numbers with representations within W nodes of each other will have overlapping bits.
The downside to this approach is that we are limited in the number of representable numbers.
With a width of 1 we can only represent N different numbers. The number of representable
numbers decreases as the width increases.
</p>

<img alt="Illustration for sliding representation." src="/blog/2013/05/03/chaos-in-neural-networks/sliding.png"/>

<p>
Perhaps the most obvious representation is as a natural binary numeral. Treat one node
as the 1/2 place, another node as the 1/4 place, yet another as the 1/8 place, et cetera.
The benefit of this system is that we can now represent 2<sup>N</sup> different numbers
in a network of N nodes. What we lose is the property that numbers similar in magnitude
will have low Hamming distances to each other. In fact, 1/2 and its nearest number in
magnitude, 1/2 - 1/2<sup>N+1</sup>,
will have a Hamming distance of N from each other, since every bit will be different.
</p>

<img alt="Illustration for natural binary numeral representation." src="/blog/2013/05/03/chaos-in-neural-networks/binary.png"/>

<p>
Another choice has both the benefits of 2<sup>N</sup> possible numeral representations
and Hamming distance proportional to the difference in magnitudes.
Enumerate all possible bit strings by only changing on bit at a time. Start with all
zeros for 0 and flip (1 changes to 0 and 0 changes to 1) the rightmost bit you can
without repeating a previous representation. This is called a reflected binary Gray code.
(<a href="/blog/2013/05/03/chaos-in-neural-networks/#ref-gray-codes">Beasley</a>)
</p>

<img alt="Illustration for Gray code representation." src="/blog/2013/05/03/chaos-in-neural-networks/gray.png"/>

<p>
There is a property missing in this representation, and that is sparseness. We will
see that sparseness is important in the dynamics of these networks. Without it, chaos
is not possible. An orbit will go to a state with all ones or all zeros.
</p>

<p>
I believe it is possible to use Gray codes in such a way that all representable numbers
have some number W states active. Instead of 0 being all bits zero, it will have
W bits active, grouped together at one end. To create such a mapping, we could enumerate
a Gray code as normally done but only consider those with W active bits.
</p>

<p>
Such a code would allow us to represent N choose W possible numbers. Perhaps this would
be a happy medium between the sliding encoding and the Gray code representation?
I did not find a way to efficiently compute a mapping between [0, 1] and these sparse
Gray codes for this project, so this encoding will not be used in these experiments.
</p>


<h3>Step 2: Propogation</h3>
<p>
The propogation of active states is quite simple. Considering only those edges whose
weight is greater than the threshold, send a message across all edges originating at
an active node. The recieving nodes merely add up the number of messages they recieve.
This count will be used later to decide which state the nodes will become.
</p>

<p>
We can represent this adding up of messages with a matrix multiplication. If states
of each node are a column vector <em>v</em> (values 0 or 1) and the active edges are a
matrix <em>G</em> (with value 1 if the edge weight is above the threshold, and 0 if below),
the number of messages propogated to each node is the column vector <em>vG.</em>
</p>


<h3>Step 3: Activation and Inhibition</h3>
<p>
In these experiments I tried two different methods for choosing the output state of the
nodes. The first method is to pick a threshold M. If a node recieves &gt; M messages, it
is activated, otherwise it is set to the inactive state.
</p>

<p>
It turns out for most graph configurations the first choice leads to rather uninteresting,
fixed-point dynamics. Instead, we add a “inhibition” and “boosting”
property to the activation dynamics. Simply, we choose the threshold M such that some
proportion of the states will be active. e.g. approximately 50% of all nodes should be active.
If multiple nodes have received the same number of messages, either all of these nodes
will become active or all will become inactive.
</p>



 Writeup 
<h2>Results</h2>
<p>
In all experiments, I choose randomly choose graph with N nodes. After picking a threshold
for edges to be active, this defines a one-dimensional map. I then feed an initial state to
this map and iterate to find an orbit.
</p>

<h3>Slider representation</h3>
<p>
For my first set of experiments, I used a "slider" representation. Since only about N states
make sense, with each iteration I convert the state to a floating point number and then
back to a slider representation. For converting from these many states to floating points,
I consider only the position of the median / middle active node.
</p>

<p>
I spent many hours of computation calculating orbits of various size graphs, edge thresholds,
and node activation thresholds, but every orbit was either periodic or reached a fixed point!
Here is a typical orbit.
</p>

<img alt="a typical periodic slider orbit" src="/blog/2013/05/03/chaos-in-neural-networks/orbit-slider.png"/>

<p>
Looking back, it doesn't seem too surprising that I could not
find any non-periodic orbits with this representation method.
There are so few possible valid states that sensitive dependence
on initial conditions becomes quite unlikely.
</p>


<h3>Natural binary numeral representation</h3>
<p>
Initially, my exploration using binary numeral representations did not look any more promising.
Every orbit I tried went to 0 or 1 in a very short time. With a threshold too high, the orbit
went to 0.
</p>

<img alt="Orbit going to 0 with 'high' threshold." src="/blog/2013/05/03/chaos-in-neural-networks/orbit-bitstate-noinhibition-thresh25.png"/>

<p>
With a threshold too low, the orbit went to 1.
</p>

<img alt="Orbit going to 1 with 'low' threshold." src="/blog/2013/05/03/chaos-in-neural-networks/orbit-bitstate-noinhibition-thresh20.png"/>

<p>
Since 0 means no nodes are active, it is trivial to see it is a fixed state. No messages
will be sent! For 1, all nodes are active. To get here each node had to recieve enough messages to
become active. With all nodes active, at least that many messages will be sent, so if we reach
1 starting from a different state, 1 must be a fixed state.
</p>

<p>
Although these systems are completely deterministic, we can try to understand
the dynamics a bit better with probability theory. Each node recieves input from
the a particular active input with a probability <em>p.</em> Since the graph is
fully connected, <em>p</em> is equal to our edge threshold.
</p>

<p>
Therefore, if there are <em>I</em> active input nodes, each output node gets messages
according to the binomial distribution <em>B(p, I).</em> If the threshold is set to be the
median of this distribution, we have a standard random walk. This goes unbounded in both
directions. If it is set greater or less,
we know that the walk will on average continue unbounded in one direction. Thus we reach
one of our fixed states, 0 or 1.
</p>

<p>
To get more interesting dynamics, we use inhibition. We ensure that only a
reasonable number of nodes are placed into the active state. By the same
mechanism, we can ensure we also place at least a minimal number of nodes
into active state.
</p>

<p>
Basically, we pick the threshold after each step based on the proportion of
nodes we want to become active. For example, if we want half the nodes to
become active, we set the threshold to be the median number of messages
received in each iteration. This yields orbits and return maps that look like
this:
</p>

<h4>Binary numeral orbit 1</h4>
<img alt="Binary numeral orbit 1" src="/blog/2013/05/03/chaos-in-neural-networks/orbit-bitstate-inhibition-G1000.png"/>
<img alt="Return map for binary numeral orbit 1" src="/blog/2013/05/03/chaos-in-neural-networks/returnmap-bitstate-inhibition-G1000.png"/>

<h4>Binary numeral orbit 2</h4>
<img alt="Binary numeral orbit 2" src="/blog/2013/05/03/chaos-in-neural-networks/orbit-bitstate-inhibition-G1000-2.png"/>

<a href="/blog/2013/05/03/chaos-in-neural-networks/returnmap-bitstate-inhibition-G1000-2.png">
<img alt="Return map for binary numeral orbit 2" src="/blog/2013/05/03/chaos-in-neural-networks/returnmap-bitstate-inhibition-G1000-2.png"/>
</a>

<h4>Binary numeral orbit 3</h4>
<img alt="Binary numeral orbit 3" src="/blog/2013/05/03/chaos-in-neural-networks/orbit-bitstate-inhibition-G1000-3.png"/>

<a href="/blog/2013/05/03/chaos-in-neural-networks/returnmap-bitstate-inhibition-G1000-3-100000o.png">
<img alt="Return map for binary numeral orbit 3" src="/blog/2013/05/03/chaos-in-neural-networks/returnmap-bitstate-inhibition-G1000-3-100000o.png"/>
</a>

<p>
I calculated the Lyapunov numbers for this last graph for orbits of length 100, 1,000, and
10,000. I got 14.1, 17.4, and 20.4, respectively. This increasing Lyapunov number reminds
me of the same behaviour in a purely random orbit. We see from the orbit and return map that
two numbers can be arbitrarily close to one another in magnitude but yield wildly different
results.
</p>

<p>
We see from the return maps, we get a very discontinuous function. As we take
the number of nodes N to infinity, the limit relation describes a function on
real numbers. The majority of functions described by such a sequence of
graphs will be discontinuous at all points.
</p>
<p>
In order for the limit function, f, to be continuous at a point, x,
we'd need to “fill in” around the point. If we approach from
the left or from the right, the limit of every subsequence should go to a
particular value, f(x).
</p>

<p>
For each N, there are two values as close as possible to an interior point, x. These are
x ± 2<sup>N</sup>. The map applied to these values should be nearer to the limit
point p than the nearest values in N-1 had. |f(x) - f(x ± ε<sub>N</sub>)| &lt;
|f(x) - f(x ± ε<sub>N-1</sub>)|. Since there are only finitely many such
possible values for each N, the probability of choosing such a function <em>p<sub>N</sub></em>
is less than 1. Thus the probability of picking a sequence of functions which makes the
point <em>x</em> continuous is  <em>p<sub>1</sub>p<sub>2</sub>p<sub>3</sub>… → 0.</em>
</p>



<h3>Gray code representation</h3>
<p>
Since a Gray code can also represent 2<sup>N</sup> possible states, when looking at just the
dynamics of how states of the nodes change over an orbit, it will be identical to the binary
numeral case. Still, we expect the dynamics of the orbit to look a little different. Since
we are mapping Gray codes to and from floating point numbers,
we necessarily have a one-to-one function between the Gray code and the binary numeral representation.
Therefore the maps are conjugate. (<a href="/blog/2013/05/03/chaos-in-neural-networks/#ref-chaos-textbook">Alligood 115</a>)
</p>

<p>
Since the maps are conjugate, the same analysis from the binary numeral
of the continuity of these functions applies. That is, the probability is 0 that we
pick a sequence of graphs to define a function that is continuous even at a single point.
</p>

<p>
The property of Gray codes that the nearest numbers in magnitude are only Hamming distance
1 away does help keep function values close together, though.
Think about how we pick the next point in the orbit. Messages propogate
along the edges out of nodes. Most of the messages will go to the same nodes in these three
graph states (x and its neighbors). Therefore, the states resulting from the map application
are likely to be similar to each other, since they only differ in the messages sent from a single
node. This is quite a bit “nicer” than we had in the binary numeral interpretation.
</p>

<h4>Gray code orbit 1</h4>
<a href="/blog/2013/05/03/chaos-in-neural-networks/graycode-01000-orbit.png">
<img alt="Gray code orbit 1" src="/blog/2013/05/03/chaos-in-neural-networks/graycode-01000-orbit.png"/>
</a>
<a href="/blog/2013/05/03/chaos-in-neural-networks/graycode-10000-returnmap.png">
<img alt="Return map for Gray code orbit 1" src="/blog/2013/05/03/chaos-in-neural-networks/graycode-10000-returnmap.png"/>
</a>

<p>
Lyapunov numbers for 100, 1,000, and 10,000 length orbits were calculated using Wolf's algorithm
at 7.5, 13.8, and 18.4, respectively.
</p>

<h4>Gray code orbit 2</h4>
<a href="/blog/2013/05/03/chaos-in-neural-networks/graycode-G2-01000-orbit.png">
<img alt="Gray code orbit 2" src="/blog/2013/05/03/chaos-in-neural-networks/graycode-G2-01000-orbit.png"/>
</a>
<a href="/blog/2013/05/03/chaos-in-neural-networks/graycode-G2-10000-returnmap.png">
<img alt="Return map for Gray code orbit 2" src="/blog/2013/05/03/chaos-in-neural-networks/graycode-G2-10000-returnmap.png"/>
</a>

<p>
Lyapunov numbers for 100, 1,000, and 10,000 length orbits were calculated using Wolf's algorithm
at 8.7, 14.2, and 19.3, respectively.
</p>

<p>
These orbits actually look quite a bit different from those of the binary numerals, qualitatively.
They seem to stay close to a certain value for most of the time with occasional deviations. This
seems to be due to the property that numbers similar in magnitude are separated by a small
Hamiltonian distance.
</p>

<p>
They remind me a bit of the plots of the successive differences in stock prices seen in the
Fractal Geometry textbook. (<a href="/blog/2013/05/03/chaos-in-neural-networks/#ref-fractal">Frame</a>) For example, this image of the successive
differences in IBM stock price from 1959 to 1996.
</p>

<img alt="The successive differences in IBM stock price has small deviations and large jumps." src="/blog/2013/05/03/chaos-in-neural-networks/ibm-differences-1959-1996.gif"/>

<p>
While this is a very simple, 1-layer model of brain activity, perhaps numbers actually
are represented by something akin to Gray codes in the brain? One can imagine stock traders
with Gray code orbits in their brain of what the IBM stock price should be.
</p>



<h3>Learning</h3>
<p>
In another set of experiments, I played with “learning” rules applied to these
orbits. By that, I mean the graph generating the orbit is modified according to
“Hebbian” learning rules, where nodes which fire in succession are wired
more strongly together. The weight of the edge connecting them is increased.
</p>

<p>
It did not take long to see that the application of such a rule can “tame”
chaos. Even with a binary numeral representation, what would have originally been
chaotic orbits became fixed states
</p>

<img alt="After few steps, the graph learns to be in a fixed state." src="/blog/2013/05/03/chaos-in-neural-networks/orbit-learnedbitstate-3.png"/>

<p>
or periodic orbits.
</p>

<img alt="Periodic after few steps." src="/blog/2013/05/03/chaos-in-neural-networks/orbit-learnedbitstate-4-periodic.png"/>

<p>
The reason for this behavior is that the learning rule creates a feedback loop.
By going to a particular number we become more likely to go to that number in the
future. The learning rule does this by increasing the weights of those edges that
got the orbit in a state and decreasing the weights of those edges that did not
contribute.
</p>

<p>
When the weights of edges are increased, more edges get weights above the edge threshold.
Thus more messages are sent to nodes that have already become active. With 50% of the
nodes active at any one time, it is not surprising that the messages sent in successive
steps are quite similar. It doesn't take long for this affect to overwhelm any chaotic
dynamics.
</p>


<h2>Summary</h2>
<p>
In a neural network with distributed representations, what seems to matter most for the
dynamics is the number of representable states. If a network with <em>N</em> nodes can
only represent <em>O(N)</em> different numbers, the dynamics are relatively simple. If
the network can represent <em>O(2<sup>N</sup>)</em> possible states, we have no problem
finding chaotic orbits.
</p>

<p>
Representation also seems to matter for qualitative properties of the orbits generated.
Though the map using Gray codes to convert from node states and the map interpreting
node states as binary numerals are conjugate, they differ in what “typical”
orbits look like. Orbits from gray codes seem to stay close to to a mean value with occasional
large deviations. Orbits from binary numerals hop around a thicker band of values.
</p>

<p>
Since experiments have shown representations in real brains to be sparse and distributed
(<a href="/blog/2013/05/03/chaos-in-neural-networks/#ref-sdr-olfactory">Yu Y</a>)
and as <a href="/blog/2013/05/03/chaos-in-neural-networks/#ref-sprott">J.C. Sprott writes</a>,
a chaotic state is arguably the most healthy for a natural network,
I hypothesize that brains represent numbers in the network with a “sparse” Gray
code. That is, numbers of similar magnitudes have similar bit strings, as in Gray codes, but
only a fixed number of bits are active at a time.
</p>



<h2>Appendix A : References</h2>

<ul>
<li id="ref-chaos-textbook">Alligood, Kathleen T., Tim Sauer, and James A. Yorke.
    <em>Chaos: An Introduction to Dynamical Systems.</em>
    New York: Springer, 1997. Print.
</li>
<li id="ref-discrete-synapses">
        Barrett AB, van Rossum MCW (2008)
    <a href="http://www.ploscompbiol.org/article/info%3Adoi%2F10.1371%2Fjournal.pcbi.1000230">
        Optimal Learning Rules for Discrete Synapses.
    </a>
    PLoS Comput Biol 4(11): e1000230. doi:10.1371/journal.pcbi.1000230
</li>
<li id="ref-gray-codes">
    Beasley, David.
    "Q21: What Are Gray Codes, and Why Are They Used?"
    N.p., 11 Apr. 2001. Web. 02 May 2013.
    &lt;<a href="http://www.cs.cmu.edu/Groups/AI/html/faqs/ai/genetic/part6/faq-doc-1.html">http://www.cs.cmu.edu/Groups/AI/html/faqs/ai/genetic/part6/faq-doc-1.html</a>&gt;.
</li>
<li id="ref-grok-sensor-region">
    Grok.
<a href="https://www.groksolutions.com/technology.html">"The Technology Behind Grok. Sensor Region"</a>
    Grok. N.p., n.d. Web. 02 May 2013.
</li>
<li id="ref-fractal">
    Frame, Michael, Benoit Mandelbrot, and Nial Neger.
    "Random Fractals and the Stock Market." Fractal Geometry.
    N.p., n.d. Web. 03 May 2013.
    &lt;<a href="http://classes.yale.edu/fractals/randfrac/Market/DiffClPr/DiffClPr.html">
    http://classes.yale.edu/fractals/randfrac/Market/DiffClPr/DiffClPr.html
    </a>&gt;.
</li>
<li>
    Pilant, Michael S. <em>Math 614 : Chaos and Dynamical Systems : Course Homepage</em>,
    n.d. Web.
    &lt;<a href="http://www.math.tamu.edu/~mpilant/math614/">http://www.math.tamu.edu/~mpilant/math614/</a>&gt;.
</li>
<li id="ref-sprott">
    Sprott, J. C.
    "Chaotic Dynamics on Large Networks."
    Department of Physics, University of Wisconsin, 30 June 2008. Web.
    &lt;<a href="http://sprott.physics.wisc.edu/pubs/paper325.pdf">http://sprott.physics.wisc.edu/pubs/paper325.pdf</a>&gt;.
</li>
<li id="ref-boltzmann">
    Suzuki, Hideyuki, Jun-ichi Imura, Yoshihiko Horio, and Kazuyuki Aihara.
    "Chaotic Boltzmann Machines."
    Nature.com. Nature Publishing Group, 5 Apr. 2013. Web. 03 May 2013.
    &lt;<a href="http://www.nature.com/srep/2013/130405/srep01610/full/srep01610.html">
    http://www.nature.com/srep/2013/130405/srep01610/full/srep01610.html
    </a>&gt;.
</li>
<li id="ref-neural-history">
    Wallis, Charles.
    "History of the Perceptron." History of the Perceptron. N.p., n.d. Web. 03 May 2013.
    &lt;<a href="http://www.csulb.edu/~cwallis/artificialn/History.htm">
    http://www.csulb.edu/~cwallis/artificialn/History.htm
    </a>&gt;.
</li>
<li id="ref-sdr-olfactory">
    Yu Y, McTavish TS, Hines ML, Shepherd GM, Valenti C, et al. (2013)
    <a href="http://www.ploscompbiol.org/article/info%3Adoi%2F10.1371%2Fjournal.pcbi.1003014">
    Sparse Distributed Representation of Odors in a Large-scale Olfactory Bulb Circuit.
    </a>
    PLoS Comput Biol 9(3): e1003014. doi:10.1371/journal.pcbi.1003014
</li>
</ul>




<h2>Appendix B : Matlab Codes</h2>
<p>
Full source code for these experiments is <a href="https://bitbucket.org/tswast/discrete-htm-neural-network">available on Bitbucket</a>. The Lyapunov calculating functions are derived from the version available
on Professor Pilant's Chaos and Dynamical Systems <a href="http://www.math.tamu.edu/~mpilant/math614/matlab_projects.html">course webpage</a>.
</p>

<p>
<em>calculateorbit.m</em> is perhaps the most important function.
It creates an orbit using a given graph. In this case, it calculates the orbit using
Gray code representation.
</p>
<div class="matlab-code">
<p class="p1"><span class="s1">function</span> [orbit] = calculateorbit(G, orbitlength, initialstate, edge_threshold)</p>
<p class="p2">% G<span class="Apple-converted-space">          </span>: edges graph.</p>
<p class="p2">% S<span class="Apple-converted-space">          </span>: statemap.</p>
<p class="p2">% threshold<span class="Apple-converted-space">  </span>: number of active edges required to activate output.</p>
<p class="p2">% inputwidth : number of cells activated on input.</p>
<p class="p2">% orbitlength : number of iterations to do.</p>
<p class="p2">% initialstate : number at which to start, e.g. 0.0</p>
<p class="p3"><span class="Apple-converted-space"> </span></p>
<p class="p2">% setup output</p>
<p class="p1">orbit = zeros(orbitlength, 1);</p>
<p class="p1">orbit(1) = initialstate;</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p1">N2 = size(G);</p>
<p class="p1">N = N2(1);</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p2">% Setup initial state.</p>
<p class="p1">I = zeros(N,1);</p>
<p class="p1">I(:) = graycodefromfloat(initialstate,N);</p>
<p class="p1">O = zeros(N,1);</p>
<p class="p1">G = 1 * (G &gt; edge_threshold);</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="s1">for</span> i=1:orbitlength-1</p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% Activate input cells.</p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% Previously, we converted from a float back to a state,</p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% but this actually loses a lot of precision in large networks.</p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>%I(:) = graycodefromfloat(orbit(i),N);</p>
<p class="p3"><span class="Apple-converted-space"> </span></p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% Propogate activations.</p>
<p class="p1"><span class="Apple-converted-space">    </span>O(:) = I' * G;</p>
<p class="p1"><span class="Apple-converted-space">    </span>activation_threshold = median(O);</p>
<p class="p1"><span class="Apple-converted-space">    </span>O(:) = O &gt; activation_threshold;</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% Convert back to a float.</p>
<p class="p1"><span class="Apple-converted-space">    </span>orbit(i+1) = graycodetofloat(O);</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% Setup next step.</p>
<p class="p1"><span class="Apple-converted-space">    </span>I(:) = O;</p>
<p class="p5">end</p>
<p class="p6"><span class="Apple-converted-space"> </span></p>
<p class="p5">end</p>
        </div>


        <p>
            <em>calculatelearnedbitorbit.m</em> is much like calculateorbit.
            It uses a learning rule to modify the graph as the orbit progresses.
        </p>
        <div class="matlab-code">
        <p class="p1"><span class="s1">function</span> [orbit] = calculatelearnedbitorbit(G, orbitlength, initialstate, edge_threshold, proportion_active)</p>
<p class="p2">% G<span class="Apple-converted-space">          </span>: edges graph.</p>
<p class="p2">% threshold<span class="Apple-converted-space">  </span>: number of active edges required to activate output.</p>
<p class="p2">% inputwidth : number of cells activated on input.</p>
<p class="p2">% orbitlength : number of iterations to do.</p>
<p class="p2">% initialstate : number at which to start, e.g. 0.0</p>
<p class="p3"><span class="Apple-converted-space"> </span></p>
<p class="p2">% setup output</p>
<p class="p1">orbit = zeros(orbitlength, 1);</p>
<p class="p1">orbit(1) = bitstatetofloat(initialstate);</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p2">% History is special in that it is part of the "competition" between</p>
<p class="p2">% various cells. Since learning so thoroughly tamed chaos, this can</p>
<p class="p2">% perhaps help keep things from getting too periodic.</p>
<p class="p2">% Cells "want" to fire, and this will keep the cells from getting too</p>
<p class="p2">% unhappy / dormant.</p>
<p class="p2">%history = ones(size(initialstate));</p>
<p class="p1">activation_threshold = zeros(size(initialstate));</p>
<p class="p1">activation_index = int64(proportion_active * numel(initialstate));</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p1">I = 1.0 * initialstate;</p>
<p class="p1">previousnodes = 1.0 * initialstate;</p>
<p class="p1"><span class="s1">for</span> iteri = 1:orbitlength-1</p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% Propogate activations.</p>
<p class="p1"><span class="Apple-converted-space">    </span>I(:) = I' * (1.0 * (G &gt; edge_threshold));</p>
<p class="p4"><span class="Apple-converted-space">    </span></p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% Keep cells from getting dormant.</p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>%I(:) = I + history;</p>
<p class="p4"><span class="Apple-converted-space">    </span></p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% Make sure only a proportion are active.</p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% Perhaps 50% for now?</p>
<p class="p1"><span class="Apple-converted-space">    </span>activation_threshold(:) = sort(I);</p>
<p class="p1"><span class="Apple-converted-space">    </span>I(:) = 1.0 * (I &gt; activation_threshold(activation_index));</p>
<p class="p4"><span class="Apple-converted-space">    </span></p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% Update history with the new activations and lack-of-activations.</p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>%history(I &gt; 0) = 1.0;</p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>%history(I == 0) = 1.2 * history(I == 0);</p>
<p class="p4"><span class="Apple-converted-space">    </span></p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% Convert back to a float.</p>
<p class="p1"><span class="Apple-converted-space">    </span>orbit(iteri+1) = bitstatetofloat(I);</p>
<p class="p4"><span class="Apple-converted-space">    </span></p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% Learn!</p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% To learn: if a node is active for prediction and it gets activated</p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% <span class="Apple-converted-space">          </span>on input, strengthen those<span class="Apple-converted-space">  </span>incoming edges which were part</p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% <span class="Apple-converted-space">          </span>of the prediction and</p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% <span class="Apple-converted-space">          </span>weaken those incoming edges which did not contribute</p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% <span class="Apple-converted-space">          </span>to the prediction.</p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% Note that the way we are calculating on orbit, a prediction is always</p>
<p class="p2"><span class="s2"><span class="Apple-converted-space">    </span></span>% a successful prediction.</p>
<p class="p1"><span class="Apple-converted-space">    </span>G = learnfunction_hebbianstep(G, previousnodes, I, I, edge_threshold);</p>
<p class="p1"><span class="Apple-converted-space">    </span>previousnodes(:) = I;</p>
<p class="p5">end</p>
<p class="p6"><span class="Apple-converted-space"> </span></p>
<p class="p6"><span class="Apple-converted-space"> </span></p>
<p class="p5">end</p>
<p class="p7"><br/></p>
<p class="p7"><br/></p>
</div>


        <p>
            <em>learnfunction_hebbianstep.m</em> is the learning rule.
            “Nerves that fire together wire together.”
        </p>
        <div class="matlab-code">
            <p class="p1"><span class="s1">function</span> G = learnfunction_hebbianstep(G, previousnodes, predictionnodes, nextnodes, edge_threshold)</p>
<p class="p2">% Do "Hebbian" learning, in-place.</p>
<p class="p3"><span class="Apple-converted-space"> </span></p>
<p class="p1">increment = 0.02;</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p1">successfulprediction = (predictionnodes &gt; 0) &amp; (nextnodes &gt; 0);</p>
<p class="p2">%unsuccessfulprediction = (predictionnodes &gt; 0) &amp; (nextnodes == 0);</p>
<p class="p3"><span class="Apple-converted-space"> </span></p>
<p class="p2">% Increment those edges which provided a successful prediction.</p>
<p class="p1">G(previousnodes &gt; edge_threshold,successfulprediction) = min(1.0, G(previousnodes &gt; 0,successfulprediction) + increment);</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p2">% Decrement those edges which were not part of the successful prediction to</p>
<p class="p2">% those successful nodes, only.</p>
<p class="p1">G(previousnodes &lt;= edge_threshold,successfulprediction) = max(0.0, G(previousnodes == 0,successfulprediction) - increment);</p>
<p class="p3"><span class="Apple-converted-space"> </span></p>
<p class="p5">end</p>
        </div>

      ]]></description>
      <pubDate>Fri, 03 May 2013 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2013/05/03/chaos-in-neural-networks/</guid>
      <link>https://www.timswast.com/blog/2013/05/03/chaos-in-neural-networks/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Hexadecimal Numeral Names</title>
      <description><![CDATA[
        
        <p class="p-summary">
            It occurred to me the other day, I don't really think of
            hexadecimal numerals as numbers. I think this is for the
            same reason I don't think of ID numbers or credit card numbers
            as numbers. When I read these, I say each digit.
        </p>

        <p>
            Although both may be written 123, there is a clear difference
            between one, two, three and than one hundred, twenty-three.
            In the former I am thinking of an identifier. The digits are
            merely being used as symbols. In the latter, one hundred, twenty-three
            is an amount. I visualize some number of <em>things.</em>
        </p>

        <h2>What are hexadecimal numerals?</h2>
        <p>
            A hexadecimal numeral is
            <a href="http://en.wikipedia.org/wiki/Hexadecimal">usually described</a>
            as a number's representation in
            <a href="http://tools.ietf.org/html/rfc4648#page-10">base 16</a>.
            That is, rather than writing a number with 10 possible digits,
            we use 16 possible digits. Usually these 16 digits are 0 through 9 and
            A through F.
        </p>

        <p>
            Programmers and web designers see these an awful lot, as hexadecimal numerals
            are a way of
            <a href="http://coding.smashingmagazine.com/2012/10/04/the-code-side-of-color/">specifying colors</a>
            for the web.
        </p>

        <h2>How <em>should</em> we read hexadecimal numerals?</h2>
        <p>
            If a numeral represents a number, it should be read as a number.
            We cannot use the same names as we do for decimal numbers, though.
            For example, saying ten for 10<sub>16</sub> could be confusing.
        </p>

        <p>
            Instead, I propose an unambiguous system for naming hexadecimal numbers.
            I'm not the
            <a href="http://evincarofautumn.blogspot.com/2011/09/how-to-pronounce-hexadecimal-numbers.html">first</a>
            <a href="http://programmers.stackexchange.com/a/107496">person</a>
            to
            <a href="http://www.intuitor.com/hex/words.html">suggest</a> this, but
            I would like the names to be as similar to the words we are used to.
            For example, Jon Purdy's suggestion that 20<sub>16</sub> be pronounced
            “twentex” is not ideal, because twenty has a hard and then a
            soft syllable, but twentex is two hard syllables.
        </p>

        <p>
            I propose the following pronunciations for hexadecimal digits:
        </p>

        <table>
            <tbody><tr>
                <td class="digit-cell">0</td>
                <td>zero</td>
                <td class="digit-cell">1</td>
                <td>one</td>
                <td class="digit-cell">2</td>
                <td>two</td>
                <td class="digit-cell">3</td>
                <td>three</td>
            </tr>
            <tr>
                <td class="digit-cell">4</td>
                <td>four</td>
                <td class="digit-cell">5</td>
                <td>five</td>
                <td class="digit-cell">6</td>
                <td>six</td>
                <td class="digit-cell">7</td>
                <td>seven</td>
            </tr>
            <tr>
                <td class="digit-cell">8</td>
                <td>eight</td>
                <td class="digit-cell">9</td>
                <td>nine</td>
                <td class="digit-cell">A</td>
                <td>hey</td>
                <td class="digit-cell">B</td>
                <td>bee</td>
            </tr>
            <tr>
                <td class="digit-cell">C</td>
                <td>see</td>
                <td class="digit-cell">D</td>
                <td>dee</td>
                <td class="digit-cell">E</td>
                <td>ee</td>
                <td class="digit-cell">F</td>
                <td>eff</td>
            </tr>
        </tbody></table>

        <p>
            For two digits, we could use:
        </p>
        <table>
            <tbody><tr>
                <td class="digit-cell">10</td>
                <td>hexy</td>
            </tr>
            <tr>
                <td class="digit-cell">20</td>
                <td>twexy</td>
            </tr>
            <tr>
                <td class="digit-cell">30</td>
                <td>thrixy</td>
            </tr>
            <tr>
                <td class="digit-cell">40</td>
                <td>fourxy (forks-ee)</td>
            </tr>
            <tr>
                <td class="digit-cell">50</td>
                <td>fixy</td>
            </tr>
            <tr>
                <td class="digit-cell">60</td>
                <td>sexy</td>
            </tr>
            <tr>
                <td class="digit-cell">70</td>
                <td>senexy</td>
            </tr>
            <tr>
                <td class="digit-cell">80</td>
                <td>eighxy (ache-see)</td>
            </tr>
            <tr>
                <td class="digit-cell">90</td>
                <td>nixy</td>
            </tr>
            <tr>
                <td class="digit-cell">A0</td>
                <td>haehexy (hey-hexy)</td>
            </tr>
            <tr>
                <td class="digit-cell">B0</td>
                <td>baexy (bake-see)</td>
            </tr>
            <tr>
                <td class="digit-cell">C0</td>
                <td>seehexy</td>
            </tr>
            <tr>
                <td class="digit-cell">D0</td>
                <td>deexy</td>
            </tr>
            <tr>
                <td class="digit-cell">E0</td>
                <td>eexy</td>
            </tr>
            <tr>
                <td class="digit-cell">F0</td>
                <td>effexy (effects-see)</td>
            </tr>
        </tbody></table>
        <p>
            I'm sure these suggestions aren't perfect, either, but hopefully they will be
            easier to use than some of the other suggestions. Words continually evolve,
            even as I can make them up these neologisms. For example,  my inital plan for
            AO (haehexy) as haexy wouldn't work with a southern accent. It would have been ambiguous
            with 10 (hexy).
        </p>

      ]]></description>
      <pubDate>Mon, 01 Apr 2013 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2013/04/01/hexadecimal-numeral-names/</guid>
      <link>https://www.timswast.com/blog/2013/04/01/hexadecimal-numeral-names/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>An Exploration of Cellular Automata as Dynamical Systems</title>
      <description><![CDATA[
        
         Statement of the problem 
        <p class="p-summary">
            In this set of experiments, I explore cellular automata, treated as dynamical systems.
            The state of the system is a pair of real numbers, with the cells of the cellular
            automata state corresponding to binary digits of the real numbers.
            With this mapping, I calculate the largest Lyapunov exponent for each of the 256 elementary cellular
            automata. This analysis hints that so-called complex, class 4 cellular automata may be
            distinguished from chaotic, class 3 cellular automata by the largest Lyapunov exponent
            of the chaotic orbits.
        </p>

        <h2>What are cellular automata?</h2>
        <p>
            A cellular automata is a <a href="http://xkcd.com/505/">simple pattern</a>
            for updating an infinite string of “cells” in all
            places at once. In this set of experiments, I consider “elementary”
            cellular automata which act on a string of white and black cells.
            I also call a white cell a one and a black cell a zero.
        </p>

        <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/cellular-automata-state.png">
        <img alt="...010011011100..." src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/cellular-automata-state.png"/>
        </a>

        <p>
            The system starts at some initial state and then this state is updated each step
            by the cellular automaton's rule. In deciding what color a cell will become,
            the elementary cellular automata
            in this set of experiments use the color of three cells: the cell's current
            color, the color of the immediate left neighbor, and of the right neighbor.
        </p>

        <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/cellular-automata-rules.png">
        <img alt="2^3 = 8 neighborhoods" src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/cellular-automata-rules.png" title="2^3 = 8 neighborhoods"/>
        </a>

        <p>
            Since the elementary cellular automata consider three cells per update,
            and a cell is one of two possible colors,
            there are 2<sup>3</sup> = 8 possible neighborhoods to consider.
            To have a well defined rule, the result for each of these neighborhoods must
            be defined. Will it become white or black, one or zero?
        </p>

        <p>
            Because the result for each of these 8 possible neigborhoods can be one of two colors,
            there are 2<sup>8</sup> = 256 possible “rules.”
            In this set of experiments, I calculate 1,000+ steps for each of the 256 rules.
        </p>

        <h2>How do we name the cellular automata?</h2>
        <p>
            These 256 rules have a natural naming scheme.
            There is a natural ordering for the 8 neigborhoods that define a rule.
            Consider each neighborhood a three-bit binary number, ranging from 0 to 7.
        </p>

        <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/cellular-automata-rules-numbered.png">
        <img alt="8 rules, in order" src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/cellular-automata-rules-numbered.png" title="8 rules, in order"/>
        </a>

        <p>
            Note that for each neighborhood, a well defined rule will output a 0 or a 1.
            Ordering the output for the 8 different neighborhoods
            generates an eight-bit binary number, ranging from 0 to 255
            (<a href="http://www.wolframscience.com/nksonline/page-53">Wolfram 53</a>).
            For example,
            rule 1 would generate a 1 for the neighborhood 000, but
            it generates 0 for all other neighborhoods.
        </p>

        <p>
            Since my computer has only finite memory, I cannot simulate a cellular automaton on
            an infinite number of bits. Instead, I use a finite
            state space. This means, I need to decide what to do for the boundary conditions.
            Since it seems to simulate an infinite space the best, I choose to wrap the state
            space around. The left-most cell is an immediate neighbor to the right-most cell.
        </p>

        <h2>Cellular automata as dynamical systems.</h2>
        <p>
            To apply the methods of analysis from
            <a href="http://www.math.tamu.edu/~mpilant/math614/">Chaos and Dynamical Systems,</a>
            I map the state space of the cellular automata to a two-dimensional real map on [0, 1].
            I am choosing to ignore the fact that some real numbers have multiple binary
            representations (e.g. 1/2 = .1000... or .0111...).
            The reason the map is two-dimensional rather than one dimensional is this: imagine
            an infinite string of ones and zeros running in both directions. Since a
            the binary representation of a  real
            number extends infinitely in only one direction (that of the fractional part),
            the most natural thing to do is to represent this infinite string by two real numbers.
        </p>

        <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/cellular-automata-2d.png">
        <img alt="Two real numbers can simulate an infinite binary string." src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/cellular-automata-2d.png"/>
        </a>

        <p>
            Other representations are certainly possible. To represent a cellular automaton state
            as a single real number,
            one <em>could</em> pick an arbitrary location to represent the 1/2-place
            and then spiral outward.
            This feels unnatural, since neighboring digits in the cellular automata state space
            are not immediate neighbors in the real number's representation.
        </p>

        <p>
            With this mapping from cellular automaton state to a pair of real numbers, (x, y),
            a cellular automaton computation generates a list of 2D points.
            This infinite, ordered list is called an <em>orbit</em> in a dynamical system.
        </p>
        <p>
            There is a way of quanifying if an orbit is chaotic or not. Lyapunov exponents
            say how quickly orbits very close to each other spread apart.
            If the Lyapunov exponent is &gt;0, it means nearby orbits spread apart exponentially.
            The orbit is then called <em>chaotic</em> (Alligood, Definition 5.2, p.196).
            To numerically
            find the largest Lyapunov exponent of the orbit, I use Wolf's algorithm
            (Pilant <a href="http://mpeg.math.tamu.edu/home/mpilant/Math614/lecture12_raw/lecture12_raw.html">Lecture 12A</a> ;
            <a href="http://sprott.physics.wisc.edu/chaos/lyapexp.htm">Sprott</a>).
        </p>

         Writeup 
        <h2>Results</h2>
        <p>
           For each of the 256 elementary cellular automata rules, I calculated an orbit of length
            five hundred, two thousand, and five thousand. Rather than show the results of these 768
            calculations, I will show examples of 15 of the more interesting cases.
        </p>

        <p>In the 500-length case, I used as state space of 1,000 bits. I then chose an
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/#appendix-initial-states">initial condition</a>
            randomly with states of equal probability for 41 bits about its center
            <code></code></p><pre><code>octave:1&gt; s = zeros(1000, 1);
octave:2&gt; s(480:520) = rand(41, 1) &gt; 0.5;
</code></pre>
            In terms of a dynamical system, this simulates picking a two rational numbers,
            each of which can be represented with a finite number of base-2 bits.
        <p></p>

        <p>I do a similar thing in the 5,000-length orbits. With a state space of
            10,000 bits, I choose 101 bits at random with equal probability in the center.
        <code></code></p><pre><code>EDU&gt;&gt; s = zeros(10000, 1);
EDU&gt;&gt; s(4950:5050) = rand(101,1) &gt; 0.5;</code></pre>
        <p></p>

        <p>In the 2,000-length case I do something different. With a state space of 2000 bits
        I choose all 2000 bits randomly with equal probability. This is much closer to simulating
        an irrational value, especially since I chose to use circular boundary conditions.
        This will make a difference, as some cellular automata seem to have chaotic orbits only
        in this case, with an approximately irrational number.</p>

        <p>To reduce the filesizes transferred, I only show a short subset in the middle
        of each cellular automaton's “history” diagram.
        </p>


        <h3 id="rule150">Rule 150</h3>
        <p>
            Rule 150, 10010110<sub>2</sub>, is interesting because in the 2,000-length orbit
            case, it has a high Lyapunov exponent. In the orbit length
            cases, rather than chaotic orbits, it showed very regular behavior. I believe this
            is due to the difference in initial condition choice. With rational initial conditions,
            it seems to show aysmptotically periodic orbits, but with irrational initial conditions
            it shows chaotic orbits.
        </p>

        <p>The calculated Lyapunov exponent was 1.45. Compare the history and orbit of the
            2,000-length case.</p>

        <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule150-history.pdf.png"><img src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule150-history.pdf.png"/></a>

        <p>Compare to the 5,000-length case.</p>

            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule150-history-10000.pdf.png"><img src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule150-history-10000.pdf.png"/></a>

        <p>Once interpreted as two real numbers, it looks like the 5,000-length
        orbit is asymptotically periodic.</p>

        <h3 id="rule105">Rule 105</h3>
        <p>Like <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/#rule150">Rule 150</a>, Rule 105 only showed chaotic orbits in the
        2,000-length orbit case. Likely, this is for the same reason, the 2,000-length orbit
        more closely simulated an irrational initial condition.</p>

        <p>The calculated Lyapunov exponent was 1.44</p>

            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule105-history.pdf.png"><img src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule105-history.pdf.png"/></a>


        <h3 id="rule90">Rule 90, 165</h3>
        <p>Rule 90 and Rule 165 are equivalent
            (<a href="http://atlas.wolfram.com/01/01/90/01_01_1_90.html#01_01_9_90">Atlas of Simple Programs</a>).
            Replace all black cells with white cells and vice versa to switch from rule to the other.
        </p>

        <p>
            Like the previous two rules, these rules showed chaotic behavior only
            in the 2,000-length case, with a simulated irrational number. For both
            rules, I calculated a largest Lyapunov exponent as 1.39.
        </p>

            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule90-history.pdf.png"><img src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule90-history.pdf.png"/></a>


        <h3 id="rule22">Rule 22, 151</h3>
        <p>
            Rule 22 and Rule 151 are also equivalent by swapping black and white (zero and one).
            <em>Unlike</em> the previous sets of rules, I calculated chaotic orbits in all three
            experiments.
        </p>

        <p>
            In the 2,000-length Rule 22 orbit, the largest Lyapunov exponent is 1.33, but
            in the 2,000-length Rule 151 orbit, the Lyapunov exponent is 1.57. Although these
            rules are equivalent, the fact that white and black are swapped effectively means
            the initial conditions were different. This means that the Lyapunov exponent must be
            very variable for the chaotic attractor (or there are more than one attractor).
        </p>

        <p>
            This is output from rule 22.
        </p>
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule22-history.pdf.png"><img src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule22-history.pdf.png"/></a>


        <h3 id="rule45">Rule 45, 75, 89, 101</h3>
        <p>
            Rules 45, 75, 89, and 101 are equivalent. In the 2,000-length case I calculated
            Lyapunov exponents of 1.22, 1.23, 1.19, and 1.38, respectively.
        </p>
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule45-history.pdf.png"><img src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule45-history.pdf.png"/></a>


        <h3 id="rule60">Rule 60, 102, 153, 195</h3>
        <p>
            Rules 60, 102, 153, and 195 are equivalent. In the 2,000-length case I calculated
            Lyapunov exponents of
            1.17, 1.09, 1.09, and 1.17, respectively.
        </p>
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule60-history.pdf.png"><img src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule60-history.pdf.png"/></a>


        <h3 id="rule106">Rule 106, 120, 169, 225</h3>
         <p>
            Rules 106, 120, 169, and 225 are equivalent. In the 2,000-length case I calculated
            Lyapunov exponents of
            0.90, 1.03, 1.04, and 1.01,
            respectively.
        </p>
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule106-history.pdf.png"><img src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule106-history.pdf.png"/></a>


        <h3 id="rule30">Rule 30, 86, 135, 149</h3>
        <p>
            Rules 30, 86, 135, and 149 are equivalent. In the 2,000-length case I calculated
            Lyapunov exponents of
            1.05, 1.07, 0.92, and 0.88, respectively.
        </p>
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule30-history.pdf.png"><img src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule30-history.pdf.png"/></a>


        <h3 id="rule126">Rule 126, 129</h3>
        <p>
            Rules 126 and 129 are equivalent.
            In the 2,000-length case I calculated Lyapunov exponents of
            0.85
            for both.
        </p>
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule126-history.pdf.png"><img src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule126-history.pdf.png"/></a>


        <h3 id="rule146">Rule 146, 182</h3>
        <p>
            Rules 146 and 182 are equivalent.
            In the 2,000-length case I calculated Lyapunov exponents of
            0.74 and 0.73,
            respectively.
        </p>
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule146-history.pdf.png"><img src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule146-history.pdf.png"/></a>


        <h3 id="rule18">Rule 18, 183</h3>
        <p>
            Rules 18 and 183 are equivalent.
            In the 2,000-length case I calculated Lyapunov exponents of
            0.73 and 0.70,
            respectively.
        </p>
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule18-history.pdf.png"><img src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule18-history.pdf.png"/></a>


        <h3 id="rule122">Rule 122, 161</h3>
        <p>
            Rules 122 and 161 are equivalent.
            In the 2,000-length case I calculated Lyapunov exponents of
            0.70 and 0.95,
            respectively.
        </p>
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule122-history.pdf.png"><img src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule122-history.pdf.png"/></a>


        <h3 id="rule54">Rule 54, 147</h3>
        <p>
            Rules 54 and 147 are equivalent.
            In the 2,000-length case I calculated Lyapunov exponents of
            0.49 and 0.47,
            respectively.
        </p>
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule54-history.pdf.png"><img src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule54-history.pdf.png"/></a>


        <h3 id="rule110">Rule 110, 124, 137, 193</h3>
        <p>
            Rules 110, 124, 137 and 193 are equivalent.
            In the 2,000-length case I calculated Lyapunov exponents of
            0.13, 0.12, 0.02, and 0.27,
            respectively.
        </p>
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule110-history.pdf.png"><img src="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/rule110-history.pdf.png"/></a>
        <p>
        While quantitatively the least chaotic, rule 110 shows interesting
        “particle” interactions. It is for this reason that it is
        classified as a “complex,” class IV rule. (Kunkle 11)
        </p>



        <h2>References</h2>

        <ul>
            <li>Alligood, Kathleen T., Tim Sauer, and James A. Yorke.
                <em>Chaos: An Introduction to Dynamical Systems.</em>
                New York: Springer, 1997. Print.
            </li>
            <li>
                Boguta, Kovas, et al.
                <em>Wolfram Atlas of Simple Programs.</em>
                N.p., n.d. Web. 24 Mar. 2013.
                &lt;<a href="http://atlas.wolfram.com/aboutatlas.html">http://atlas.wolfram.com/aboutatlas.html</a>&gt;.
            </li>
            <li>Pilant, Michael S. <em>Math 614 : Chaos and Dynamical Systems : Course Homepage</em>, n.d. Web.
                &lt;<a href="http://www.math.tamu.edu/~mpilant/math614/">http://www.math.tamu.edu/~mpilant/math614/</a>&gt;.</li>
                <li>
                Kunkle, Daniel R. "Automatic Classication of One-Dimensional Cellular Automata." Rochester Institute of Technology Computer Science Department, 17 July 2003. Web.
                &lt;<a href="http://www.ccs.neu.edu/home/kunkle/papers/kunkle-msthesis.pdf">http://www.ccs.neu.edu/home/kunkle/papers/kunkle-msthesis.pdf</a>&gt;.
                </li>
            <li>Sprott, J. C. <em>Numerical Calculation of Largest Lyapunov Exponent.</em>  Department of Physics, University of Wisconsin, 31 Aug. 2004. Web.
                &lt;<a href="http://sprott.physics.wisc.edu/chaos/lyapexp.htm">
                http://sprott.physics.wisc.edu/chaos/lyapexp.htm</a>&gt;.</li>
            <li>Wolfram, Stephen. <a href="http://www.wolframscience.com/nksonline/">A New Kind of Science</a>. Champaign, IL: Wolfram Media, 2002.</li>
        </ul>




        <h2>Appendix A (Matlab Codes)</h2>

        <p>
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/allcellularautomata.m">allcellularautomata.m</a> is the “main loop” function.
            It takes an initial state, a number of generations to calculate, and an array
            of all rules to use in the calculations. When run in “headless” mode,
            it creates PDF files of the history, orbits, and Lyapunov exponent graphs, as well
            as text files with more detailed information.
        </p>
        <div class="matlab-code">
<p class="p1"><span class="s1">function</span> [history, fhistory] = allcellularautomata(initialstate, generations, initialrule, isheadless)</p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p1">N = length(initialstate);</p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p1">state = zeros(N, 1);</p>
<p class="p1">nextstate = zeros(N, 1);</p>
<p class="p1">history = zeros(generations, N);</p>
<p class="p1">fhistory = zeros(generations, 2);</p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="s1">for</span> rulenumber = initialrule</p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="s1">if</span> isheadless == 0</p>
<p class="p1"><span class="Apple-converted-space">    </span>f = figure();</p>
<p class="p3">else</p>
<p class="p1"><span class="Apple-converted-space">    </span>f = figure(<span class="s2">'visible'</span>,<span class="s2">'off'</span>);</p>
<p class="p3">end</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p1">state(:) = initialstate(:);</p>
<p class="p1">history(1,:) = state;</p>
<p class="p1"><span class="s1">for</span> g=2:generations</p>
<p class="p1"><span class="Apple-converted-space">    </span><span class="s1">for</span> i=1:N</p>
<p class="p5"><span class="s3"><span class="Apple-converted-space">        </span></span>% wrap around</p>
<p class="p1"><span class="Apple-converted-space">        </span>lefti = i-1;</p>
<p class="p1"><span class="Apple-converted-space">        </span><span class="s1">if</span> lefti &lt; 1</p>
<p class="p1"><span class="Apple-converted-space">            </span>lefti = N;</p>
<p class="p1"><span class="Apple-converted-space">        </span><span class="s1">end</span></p>
<p class="p5"><span class="s3"><span class="Apple-converted-space">        </span></span>% wrap around</p>
<p class="p1"><span class="Apple-converted-space">        </span>righti = i+1;</p>
<p class="p1"><span class="Apple-converted-space">        </span><span class="s1">if</span> righti &gt; N</p>
<p class="p1"><span class="Apple-converted-space">            </span>righti = 1;</p>
<p class="p1"><span class="Apple-converted-space">        </span><span class="s1">end</span></p>
<p class="p1"><span class="Apple-converted-space">        </span>nextstate(i) = n3rule([state(lefti) state(i) state(righti)], rulenumber);</p>
<p class="p1"><span class="Apple-converted-space">    </span><span class="s1">end</span></p>
<p class="p1"><span class="Apple-converted-space">    </span>state(:) = nextstate(:);</p>
<p class="p1"><span class="Apple-converted-space">    </span>history(g,:) = state(:);</p>
<p class="p3">end</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p5">% Display a conventional cellular automata map,</p>
<p class="p5">% showing state as pixels in an image. This is like the examples here:</p>
<p class="p5">% http://mathworld.wolfram.com/CellularAutomaton.html</p>
<p class="p5">% and perhaps more appropriately,</p>
<p class="p5">% with examples of rules for neighborhood 3, here:</p>
<p class="p5">% http://mathworld.wolfram.com/ElementaryCellularAutomaton.html</p>
<p class="p1">imshow(history);</p>
<p class="p5">%colormap(hot(256))</p>
<p class="p1">title(strcat(<span class="s2">'History plot for Elementary Rule '</span>, int2str(rulenumber)));</p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p5">% To interpret the finite array of states in a way that would make sense</p>
<p class="p5">% for an infinite string of bits, we interpret the state as two floating</p>
<p class="p5">% point nubmers.</p>
<p class="p5">%</p>
<p class="p5">% More accurately, we treat the state as two strings of binary digits</p>
<p class="p5">% (bits), representing two real numbers in [0, 1]. They start in the middle</p>
<p class="p5">% of the array, and one has bits going right and the other has bits going</p>
<p class="p5">% left.</p>
<p class="p5">%</p>
<p class="p5">% The alternative, treating it as only one floating point number suffers</p>
<p class="p5">% from strange effects because of boundary conditions. That is, the</p>
<p class="p5">% least-significant bits of the floating point representation affect the</p>
<p class="p5">% most-significant bits. This is not an effect that would happen in the</p>
<p class="p5">% infinite case.</p>
<p class="p1">fhistory(:) = horzcat( <span class="s1">...</span></p>
<p class="p1"><span class="Apple-converted-space">    </span>sum( <span class="s1">...</span></p>
<p class="p1"><span class="Apple-converted-space">        </span>history(:,ceil(N/2):N) .* (2 .^ (-1 .* (1+repmat(ceil(N/2):N,generations,1)-ceil(N/2)))), <span class="s1">...</span></p>
<p class="p1"><span class="Apple-converted-space">        </span>2), <span class="s1">...</span></p>
<p class="p1"><span class="Apple-converted-space">    </span>sum( <span class="s1">...</span></p>
<p class="p1"><span class="Apple-converted-space">        </span>history(:,ceil(N/2)-1:-1:1) .* (2 .^ (-1 .* repmat(1:ceil(N/2)-1,generations,1))), <span class="s1">...</span></p>
<p class="p1"><span class="Apple-converted-space">        </span>2));</p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="s1">if</span> isheadless == 0<span class="Apple-converted-space">   </span></p>
<p class="p6"><span class="s3"><span class="Apple-converted-space">    </span>disp(</span>'Initial state:'<span class="s3">)</span></p>
<p class="p1"><span class="Apple-converted-space">    </span>fhistory(1,:)</p>
<p class="p6"><span class="s3"><span class="Apple-converted-space">    </span>disp(</span>'Ending state:'<span class="s3">)</span></p>
<p class="p1"><span class="Apple-converted-space">    </span>fhistory(generations,:)</p>
<p class="p6"><span class="s3"><span class="Apple-converted-space">    </span>disp(</span>'press any key to continue'<span class="s3">);</span></p>
<p class="p5"><span class="s3"><span class="Apple-converted-space">    </span></span>% wait for user input</p>
<p class="p1"><span class="Apple-converted-space">    </span>pause;</p>
<p class="p3">else</p>
<p class="p1"><span class="Apple-converted-space">    </span>print(f, <span class="s2">'-r300'</span>, <span class="s2">'-dpdf'</span>, strcat(<span class="s2">'rule'</span>, int2str(rulenumber), <span class="s2">'-history.pdf'</span>));</p>
<p class="p3">end</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space">    </span>plot(fhistory(:,1),fhistory(:,2));</p>
<p class="p1"><span class="Apple-converted-space">    </span>title(strcat(<span class="s2">'Orbit plot for Elementary Rule '</span>, int2str(rulenumber)));</p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="s1">if</span> isheadless ~= 0</p>
<p class="p1"><span class="Apple-converted-space">    </span>print(f, <span class="s2">'-r300'</span>, <span class="s2">'-dpdf'</span>, strcat(<span class="s2">'rule'</span>, int2str(rulenumber), <span class="s2">'-orbit.pdf'</span>));</p>
<p class="p3">end</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p1">datapath = strcat(<span class="s2">'rule'</span>, int2str(rulenumber), <span class="s2">'.dat'</span>);</p>
<p class="p1">save(datapath, <span class="s2">'-ascii'</span>, <span class="s2">'fhistory'</span>);</p>
<p class="p1">multilyapunov(datapath, rulenumber);</p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p5"><span class="s1">end</span><span class="s3"> </span>% done with rules loop</p>
<p class="p3">end</p>


        </div>


        <p>
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/n3rule.m">n3rule.m</a> is the function which does the caluclations
            for each rule. It works by looking at the bits for each neighborhood in
            the rule number and multiplexing the output based on the state of the
            length-3 array/neighborhood given as input.
        </p>
        <div class="matlab-code">
<p class="p1"><span class="s1">function</span> out = n3rule(M, n)</p>
<p class="p5">% Given a rule set, n, as a unsigned 8-bit integer (uint8),</p>
<p class="p5">% does the state M produce a live or dead cell?</p>
<p class="p5">% M is a size-3 array representing a small neighborhood.</p>
<p class="p8"><span class="Apple-converted-space"> </span></p>
<p class="p5">% Convert the neighborhood into a bitmask representing the rule</p>
<p class="p5">% number.</p>
<p class="p1">bitindex = M .* [4, 2, 1];</p>
<p class="p1">bitindex = sum(bitindex);</p>
<p class="p1">bitmask = uint8(2^bitindex);</p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p1">out = bitand(bitmask, n) ~= 0;</p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
        </div>


        <p>
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/multilyapunov.m">multilyapunov.m</a> calculates the largest
            Lyapunov exponent for a 2D orbit.
        </p>
        <div class="matlab-code">
            <p class="p1"><span class="s1">function</span> multilyapunov(filename, isheadless)</p>
<p class="p5">% Calculates the largest Lyapunov exponent of a dataset.</p>
<p class="p5">% Uses the method described here:</p>
<p class="p5">% http://sprott.physics.wisc.edu/chaos/lyapexp.htm</p>
<p class="p5">% We use norm(), rather than abs(). This amounts to taking the</p>
<p class="p5">% Euclidean distance between vectors.</p>
<p class="p8"><span class="Apple-converted-space"> </span></p>
<p class="p5">% load in data file</p>
<p class="p1">data = load(filename);</p>
<p class="p5">% calculate number of data points</p>
<p class="p1">[N,M] = size(data);</p>
<p class="p1">N2 = floor(N/2);</p>
<p class="p1">N4 = floor(N/4);</p>
<p class="p5">% find mid point of orbit sequence</p>
<p class="p1">k=N2;</p>
<p class="p5">% create space for exponents</p>
<p class="p1">exponent = zeros(N4,1);</p>
<p class="p1">dprev = zeros(M,1)';</p>
<p class="p1">myeps = eps(<span class="s2">'single'</span>);</p>
<p class="p5">% look at 1/4 of the points</p>
<p class="p1"><span class="s1">for</span> (j=1:N4)</p>
<p class="p5"><span class="s3"><span class="Apple-converted-space">    </span></span>% set distance initially</p>
<p class="p1"><span class="Apple-converted-space">    </span>d = norm(data(k+1,:)-data(k,:));</p>
<p class="p1"><span class="Apple-converted-space">    </span>index = k+1;</p>
<p class="p1"><span class="Apple-converted-space">    </span><span class="s1">for</span> (i=2:N-1)</p>
<p class="p5"><span class="s3"><span class="Apple-converted-space">        </span></span>% see if there is a closer point</p>
<p class="p5"><span class="s3"><span class="Apple-converted-space">        </span></span>% We must be careful in this step to ensure that</p>
<p class="p5"><span class="s3"><span class="Apple-converted-space">        </span></span>% we renormalize along the line between the two previous</p>
<p class="p5"><span class="s3"><span class="Apple-converted-space">        </span></span>% points. That way we are getting the largest Lyapunov exponent.</p>
<p class="p1"><span class="Apple-converted-space">        </span>dcurr = data(i,:)-data(k,:);</p>
<p class="p1"><span class="Apple-converted-space">        </span><span class="s1">if</span> (i ~= k) &amp;&amp; (norm(dcurr))&lt;d &amp;&amp; ismultiple(dprev, dcurr) == 1</p>
<p class="p1"><span class="Apple-converted-space">            </span>d = norm(dcurr);</p>
<p class="p1"><span class="Apple-converted-space">            </span>index = i;</p>
<p class="p1"><span class="Apple-converted-space">        </span><span class="s1">end</span></p>
<p class="p1"><span class="Apple-converted-space">    </span><span class="s1">end</span></p>
<p class="p5"><span class="s3"><span class="Apple-converted-space">    </span></span>% write log of quotient as difference of logs to get better accuracy!</p>
<p class="p1"><span class="Apple-converted-space">    </span><span class="s1">if</span> norm(data(k,:)-data(index,:)) &gt; myeps &amp;&amp; norm(data(k+1,:)-data(index+1,:)) &gt; myeps</p>
<p class="p1"><span class="Apple-converted-space">        </span>exponent(j) = log( norm(data(k+1,:)-data(index+1,:)))-log(norm(data(k,:)-data(index,:)));</p>
<p class="p1"><span class="Apple-converted-space">    </span><span class="s1">end</span></p>
<p class="p5"><span class="s3"><span class="Apple-converted-space">    </span></span>% repeat with the next point</p>
<p class="p1"><span class="Apple-converted-space">    </span>k = k+1;</p>
<p class="p3">end</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p5">% now plot the lyapunov exponents</p>
<p class="p1">t = 1:N4;</p>
<p class="p1">lyapunov = exponent(1:N4);</p>
<p class="p1">exp_avg = 0.0;</p>
<p class="p5">% find the average value for lyapunov exponent</p>
<p class="p1"><span class="s1">for</span> (i=1:N4)</p>
<p class="p1"><span class="Apple-converted-space">    </span>exp_avg = exp_avg + exponent(i);</p>
<p class="p3">end</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
<p class="p5">% plot the exponents, the average, and the baseline</p>
<p class="p1"><span class="s1">if</span> isheadless == 0</p>
<p class="p1"><span class="Apple-converted-space">    </span>f = figure();</p>
<p class="p3">else</p>
<p class="p1"><span class="Apple-converted-space">    </span>f = figure(<span class="s2">'visible'</span>,<span class="s2">'off'</span>);</p>
<p class="p3">end</p>
<p class="p1">exp_avg = exp_avg/N4;</p>
<p class="p1">plot(t,lyapunov,t,0,t,exp_avg);</p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="s1">if</span> isheadless ~= 0</p>
<p class="p1"><span class="Apple-converted-space">    </span>pathprefix = strcat(<span class="s2">'rule'</span>, int2str(isheadless), <span class="s2">'-lyapunov'</span>);</p>
<p class="p1"><span class="Apple-converted-space">    </span>print(f, <span class="s2">'-r300'</span>, <span class="s2">'-dpdf'</span>, strcat(pathprefix, <span class="s2">'.pdf'</span>));</p>
<p class="p1"><span class="Apple-converted-space">    </span>fid = fopen(strcat(pathprefix, <span class="s2">'.txt'</span>), <span class="s2">'w'</span>);</p>
<p class="p3">else</p>
<p class="p1"><span class="Apple-converted-space">    </span>fid = 0;</p>
<p class="p3">end</p>
<p class="p6"><span class="s3">fprintf(fid, </span>'average value for lyapunov exponent is: %f\n'<span class="s3">, exp_avg);</span></p>
<p class="p1">fclose(fid);</p>
        </div>



        <p>
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/ismultiple.m">ismultiple.m</a> is a helper function for calculating
            the largest Lyapunov exponent for a 2D orbit. It is used to determine points
            which are okay to use for renormalization.
        </p>
        <div class="matlab-code">
            <p class="p1"><span class="s1">function</span> [output] = ismultiple(scaledv, rootv)</p>
<p class="p5">% Returns 1 if scaledv = lambda * rootv for some scalar lambda.</p>
<p class="p5">% Otherwise 0</p>
<p class="p8"><span class="Apple-converted-space"> </span></p>
<p class="p5">% Define some value of 'close'.</p>
<p class="p5">% Here we use the machine epsilon for the single precision value of 1.</p>
<p class="p5">% Even though the default is double precision, this will make it more</p>
<p class="p5">% likely for us to find better Lyapunov exponents in the multi-dimensional</p>
<p class="p5">% case.</p>
<p class="p1">myeps = eps(<span class="s2">'single'</span>);</p>
<p class="p1">output = 0;</p>
<p class="p2"><span class="Apple-converted-space"> </span></p>
<p class="p5">% Two vectors are linearly dependent when the determinant of this matrix</p>
<p class="p5">% is zero. See:</p>
<p class="p5">% http://www.math.oregonstate.edu/home/programs/undergrad/CalculusQuestStudyGuides/vcalc/lindep/lindep.html</p>
<p class="p5">% http://en.wikipedia.org/wiki/Linear_independence#Alternative_method_using_determinants</p>
<p class="p1">D = horzcat(scaledv', rootv');</p>
<p class="p1"><span class="s1">if</span> det(D) &lt;= myeps</p>
<p class="p1"><span class="Apple-converted-space">    </span>output = 1;</p>
<p class="p3">end</p>
<p class="p4"><span class="Apple-converted-space"> </span></p>
        </div>

        <h2>Appendix B (Lyapunov exponents)</h2>
<table>
  <thead>
    <tr>
      <th>Rule</th>
      <th>Notes</th>
      <th>2,000-length<br/>Lyapunov exp.</th>
      <th>500-length</th>
      <th>5,000-length</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>73</td>
      <td>W+</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <td>109</td>
      <td>W+</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr class="oddrow">
      <td>137</td>
      <td>^</td>
      <td>0.021314</td>
      <td>0.164427</td>
      <td>0</td>
    </tr>
    <tr class="oddrow">
      <td>124</td>
      <td>^</td>
      <td>0.119714</td>
      <td>0.058037</td>
      <td>0</td>
    </tr>
    <tr class="oddrow">
      <td>110</td>
      <td>^</td>
      <td>0.125197</td>
      <td>0.005764</td>
      <td>0</td>
    </tr>
    <tr class="oddrow">
      <td>193</td>
      <td>^</td>
      <td>0.273403</td>
      <td>0.191303</td>
      <td>0</td>
    </tr>
    <tr class="evenrow">
      <td>147</td>
      <td>^</td>
      <td>0.469898</td>
      <td>0.592045</td>
      <td>0</td>
    </tr>
    <tr class="evenrow">
      <td>54</td>
      <td>^</td>
      <td>0.492321</td>
      <td>0.014497</td>
      <td>0</td>
    </tr>
    <tr class="oddrow">
      <td>122</td>
      <td>+</td>
      <td>0.698529</td>
      <td>0.145074</td>
      <td>0</td>
    </tr>
    <tr class="oddrow">
      <td>161</td>
      <td>+</td>
      <td>0.949707</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr class="evenrow">
      <td>183</td>
      <td>+</td>
      <td>0.699048</td>
      <td>0.089066</td>
      <td>0</td>
    </tr>
    <tr class="evenrow">
      <td>18</td>
      <td>+</td>
      <td>0.729279</td>
      <td>0.456123</td>
      <td>0</td>
    </tr>
    <tr class="oddrow">
      <td>182</td>
      <td>+</td>
      <td>0.731118</td>
      <td>0.078797</td>
      <td>0</td>
    </tr>
    <tr class="oddrow">
      <td>146</td>
      <td>+</td>
      <td>0.740505</td>
      <td>0.093224</td>
      <td>0</td>
    </tr>
    <tr class="evenrow">
      <td>126</td>
      <td>+</td>
      <td>0.846913</td>
      <td>0.080218</td>
      <td>0</td>
    </tr>
    <tr class="evenrow">
      <td>129</td>
      <td>+</td>
      <td>0.846914</td>
      <td>0.080263</td>
      <td>0</td>
    </tr>
    <tr class="oddrow">
      <td>149</td>
      <td>W+</td>
      <td>0.884794</td>
      <td>0.080263</td>
      <td>0.973602</td>
    </tr>
    <tr class="oddrow">
      <td>135</td>
      <td>W+</td>
      <td>0.917641</td>
      <td>0.843196</td>
      <td>0.973499</td>
    </tr>
    <tr class="oddrow">
      <td>30</td>
      <td>W+</td>
      <td>1.045584</td>
      <td>0.769440</td>
      <td>0.986373</td>
    </tr>
    <tr class="oddrow">
      <td>86</td>
      <td>W+</td>
      <td>1.065465</td>
      <td>0.821074</td>
      <td>0.928197</td>
    </tr>
    <tr class="evenrow">
      <td>106</td>
      <td>+ </td>
      <td>0.897803</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr class="evenrow">
      <td>225</td>
      <td>+ </td>
      <td>1.007624</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr class="evenrow">
      <td>120</td>
      <td>+ </td>
      <td>1.033221</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr class="evenrow">
      <td>169</td>
      <td>+ </td>
      <td>1.037291</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr class="oddrow">
      <td>102</td>
      <td>+ </td>
      <td>1.088862</td>
      <td></td>
      <td></td>
    </tr>
    <tr class="oddrow">
      <td>153</td>
      <td>+</td>
      <td>1.088862</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr class="oddrow">
      <td>60</td>
      <td>+</td>
      <td>1.170586</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr class="oddrow">
      <td>195</td>
      <td>+ </td>
      <td>1.170586</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr class="evenrow">
      <td>89</td>
      <td>W+</td>
      <td>1.192999</td>
      <td>1.285273</td>
      <td>1.299358</td>
    </tr>
    <tr class="evenrow">
      <td>45</td>
      <td>W+</td>
      <td>1.217507</td>
      <td>1.249671</td>
      <td>1.271245</td>
    </tr>
    <tr class="evenrow">
      <td>75</td>
      <td>W+</td>
      <td>1.230172</td>
      <td>1.088283</td>
      <td>1.324628</td>
    </tr>
    <tr class="evenrow">
      <td>101</td>
      <td>W+</td>
      <td>1.378533</td>
      <td>1.141068</td>
      <td>1.395981</td>
    </tr>
    <tr class="oddrow">
      <td>22</td>
      <td>+ </td>
      <td>1.327705</td>
      <td>1.385613</td>
      <td>1.458550</td>
    </tr>
    <tr class="oddrow">
      <td>151</td>
      <td>+ </td>
      <td>1.571052</td>
      <td>1.384629</td>
      <td>1.449308</td>
    </tr>
    <tr class="evenrow">
      <td>90</td>
      <td>+ </td>
      <td>1.390813</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr class="evenrow">
      <td>165</td>
      <td>+ </td>
      <td>1.390813</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr class="oddrow">
      <td>105</td>
      <td>+ </td>
      <td>1.443450</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr class="evenrow">
      <td>150</td>
      <td>+ </td>
      <td>1.446001</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>

        <p>
          [+] Labeled Chaotic in
              <a href="http://www.ccs.neu.edu/home/kunkle/papers/kunkle-msthesis.pdf">Kunkle's classification thesis</a>.
          [^] Labeled Complex in
              <a href="http://www.ccs.neu.edu/home/kunkle/papers/kunkle-msthesis.pdf">Kunkle's classification thesis</a>.
          [W] Complexity from simple initial conditions (Wolfram p.58).

        </p><h2 id="appendix-initial-states">Appendix C (Initial States)</h2>
        <p>
            For the curious, I am providing the initial states I used for these experiments.
            Most pictures shown here were generated by running 2,000 steps with
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/initial-2000.txt">this initial state</a>. I found this approximated
            an irrational initial state, whereas the initial states I used for the
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/initial-1000.txt">500-length orbits</a> and the
            <a href="/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/initial-10000.txt">5,000-length orbits</a>
            are more like rational initial states.
        </p>

      ]]></description>
      <pubDate>Sun, 31 Mar 2013 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/</guid>
      <link>https://www.timswast.com/blog/2013/03/31/an-exploration-of-cellular-automata-as-dynamical-systems/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Coordinate Systems Matter</title>
      <description><![CDATA[
        
<p class="e-summary">
I have discovered more than once in recent free-time projects, that
<a href="http://www.dijkstrascry.com/node/86">exploiting symmetry</a>
can help make code much simpler to write and understand. In fact, it makes
some problems feel tractable, when at first they felt as though a complicated
"brute force" technique was needed.
</p>

<p>
    I'll give some examples of where simply adjusting coordinate systems
    made my problems much easier to understand and solve.
    By changing to the right coordinate system,
    <a href="http://www.dijkstrascry.com/node/86">symmetries</a>
    in the problem can become more apparent.
</p>

<h2>
     Hexagons
</h2>

<p>
    One project I have been working on in my spare time is a digital instrument
    that uses the Lattice Boltzmann Method to simulate fluids. In it, I have
    fill the screen with hexagons (2DQ7), where each hexagon simulates how pressure
    waves move through a two dimensional surface. Thus, the problem arises:
    “In what structure store the hexagons, how would I map hexagon indices
    to screen positions, and how do I find neighboring hexagons?”
</p>

<p>
    When I started the project, I approached these question the same way I would
    a lattice of squares (2DQ9). Working with pixels much longer than I have
    <a href="http://www.hexels.com/">hexels,</a> it was difficult to start from
    first principles.
</p>

<p>
    The nice thing with a lattice of squares / screen of pixels is that a 2D array
    maps directly onto it in a reasonably straight-forward manner. In fact, it can
    be as simple as directly translating array index to pixel position.
</p>

<img alt="3 by 3 grid of squared, numbered identically to a 2D array" src="/blog/2013/01/20/coordinate-systems/d2q9-lattice.png" title="The coordinates in this picture could just as easily label pixel coordinates or postition in a 2D array."/>

<p>
    I attempted to do a similar mapping with hexagons, and it “worked,” but
    I went through many iterations and errors as I walked through the different cases for
    drawing and finding neighbors. Doing things this way, I was shoving a hexagonal peg
    into a square hole.
</p>

<img alt="A sample of hexagons labeled s.t. the index was nearest to the 2D array / pixel mapping." src="/blog/2013/01/20/coordinate-systems/d2q7-lattice-nonlinear-mapping.png" title="This labeling is non-linear!"/>

<p>
    Doing this was frustrating in two ways. The first is that I could draw such a numbering by
    hand easily enough, but it took many wrong implementations translating the procedure to
    code. The drawing code for even rows and that for odd rows ends up being very different
    from each other. Second, even once the code was implemented correctly, it felt wrong
    to be doing things this way. After all, a hexagon in an even row looks exactly the same
    as a hexagon in an odd row. The code should reflect this symmetry. My code reaked of
    <a href="http://c2.com/cgi/wiki?CodeSmell">code smell</a>.
</p>

<p>
    Ideally, we can find a mapping where hexagons are treated more symmetrically. That is,
    the mapping from 2D array index to screen position should be linear. Meaning, it should
    be a simple addition and multiplication. There should be no difference in even versus odd
    rows or any other unnecessary distinction between the different hexagons.
</p>

<p>
    In this light, we see that our choice to attempt to fit the x and y directions at 90 degrees
    is a poor fit for a lattice of hexagons. Instead, we should choose an x and y direction (the
    <em><a href="http://en.wikipedia.org/wiki/Basis_%28linear_algebra%29">basis</a></em> in linear-algebra-speak)
</p>

<img alt="Choose x, y directions (the basis) in a way that makes sense for hexagons." src="/blog/2013/01/20/coordinate-systems/d2q7-mapping-choices.png" title="Use the symmetry in a hexagon to your advantage."/>

<p>
    Choosing an x and y direction not 90 degrees apart may look strange, but to do so when
    drawing a grid of hexagons will cause more pain that needed. Had I looked at the problem
    this way from the beginning it would have saved me at least four iterations of bug fixing,
    finding missing cases in drawing code and neighbor finding code.
</p>

<img alt="This mapping has a basis going south-west and south-east." src="/blog/2013/01/20/coordinate-systems/d2q7-good-mapping.png" title="By using a better basis, we have removed ugly asymmetries."/>

<h2>
    Queens
</h2>

<p>
    Looking at symmetries in coordinate systems is also helpful when looking at the
    <a href="http://en.wikipedia.org/wiki/Eight_queens_puzzle">n queens problem</a>.
    The first part of this is to specify what exactly it means for a set of queens
    to be attacking each other. Queens are said to be attacking each other if they
    lie in the same row, column, or diagonal.
</p>

<img alt="Queens attack columns, rows, and diagonals." src="/blog/2013/01/20/coordinate-systems/queen-directions.png" title="There are four directions in which queens attack."/>

<p>
    Can we translate the notion of queens attacking each other into mathematics?
    If we are given a set of queens as (row, column) positions, can we determine
    if any are attacking each other?
</p>

<p>
    Let's start with the rows. If more than one queen shares a row, then these
    queens are said to be attacking each other along that row. So, looping through
    all the row coordinates of the queens and finding the existence of duplicates
    (with a hash set, by sorting, or whatever other method you'd like to find duplicates)
    is equivalent to finding out if the queens are attacking along some row. The
    same argument applies to finding queens attacking along some column.
</p>

<p>
    Is there a simple way to find queens attacking along the diagonals? Would it
    work in the same way as the rows and columns. It feels as though the problem
    and solution should be symmetric. We are just finding if the queens lie along
    a certain line in the row, column, and diagonals cases, after all.
</p>

<img alt="By rotating a chess boad by 45 degrees, diagonals look just like rows and columns! row' = row + col, col' = col - row." src="/blog/2013/01/20/coordinate-systems/queen-rotate.png" title="By rotating 45 degrees, diagonals look just like rows and columns!"/>

<p>
    Just as with the hexagons problem, with a change of coordinates
    (in this case, by rotating 45 degrees and scaling), what we at first thought
    was difficult now looks easy. By converting the queens' (row, column) coordinates
    to (row + column, column - row) coordinates, what we have <em>really</em> done
    is convert the queens' coordinates to (south-east diagonal, south-west diagonal)
    form.
</p>

<p>
    With this new set of coordinates in hand, we can use the exact same duplicating
    finding method as we did with rows and columns to determine if queens are attacking
    along one of the diagonals.
</p>

<h2>
    Conclusion
</h2>

<p>
    Changing coordinates can highlight valuable symmetries when solving programming
    can both prevent bugs and make problems tractable. Finding
    <a href="http://www.dijkstrascry.com/node/86">symmetry</a> is a very important step.
    By taking the time to find symmetries in the problems I've encountered in my
    side projects, I could have saved myself from a lot of debugging time.
</p>

      ]]></description>
      <pubDate>Sun, 20 Jan 2013 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2013/01/20/coordinate-systems/</guid>
      <link>https://www.timswast.com/blog/2013/01/20/coordinate-systems/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Building a PBS streaming device with Raspberry Pi and OpenELEC XBMC : Part 2, Software</title>
      <description><![CDATA[
        
<p>In this series, I'll go from start to finish on how to build a
home-theater computer with Raspberry Pi and the OpenELEC XBMC Operating
System. At the end we'll be able to install XBMC plugins to stream videos,
including PBS.

</p><ol>
  <a href="/blog/2012/12/26/hardware-for-building-a-raspberry-pi-pbs-streaming-device/">
    <li>
      Hardware for a Raspberry Pi PBS Streaming Device
    </li>
  </a>
  <a href="/blog/2012/12/26/software-for-building-a-raspberry-pi-pbs-streaming-device/">
    <li>
      Installing software for a Raspberry Pi PBS Streaming Device
    </li>
  </a>
</ol>

<h2>Overview</h2>

<p class="e-summary"> In this article, I assume you already have <a href="/blog/2012/12/26/hardware-for-building-a-raspberry-pi-pbs-streaming-device/">setup
all the hardware</a> you need for a Raspberry Pi. In this tutorial, you will
flash an <a href="http://openelec.tv/">OpenELEC</a> XBMC Operating System,
configure XBMC to install video addons and themes, and set up your smart
phone as a WiFi remote control.</p>

<h2>Operating System</h2>

<p>I created a companion video to walk through the steps of flashing an
operating system SD card for the Raspberry Pi.

<iframe allowfullscreen="" frameborder="0" height="315" src="http://www.youtube-nocookie.com/embed/SZClPI1ON-Q?rel=0" width="560"></iframe>

</p><p> The first step is to download the operating system image to your
computer. I used the Raspberry Pi OpenELEC images, graciously built by <a href="http://blog.thestateofme.com/2012/06/03/openelec-images/"> Chris Swan,
</a> available on <a href="http://openelec.thestateofme.com/"> his
repository. </a> Specifically, I used <a href="http://openelec.thestateofme.com/r12604.img.zip"> image 12604
</a>

<del>but newer images will likely work just as well or better</del>.
<em>Update: I tried a newer build, but found it incompatible with existing
addons repositories. This shouldn't be an issue after 3.0 is released.</em>

</p><p> Here I will give the instructions for setting your SD card from Mac OS X.
For other operating systems, the Embedded Linux wiki has a <a href="http://elinux.org/RPi_Easy_SD_Card_Setup">good write-up</a>. Since I
followed the Embedded Linux wiki instructions, my instructions will match
those. Note that even though my Mac has an internal card reader, I got
“permission denied” errors when trying to flash the SD card.
Using an <a href="http://www.amazon.com/gp/product/B004QHPYT0/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B004QHPYT0">
external card reader/writer </a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B004QHPYT0" style="border:none !important;
margin:0px !important;" width="1"/>, I was able to flash the <a href="http://www.amazon.com/gp/product/B001ECQVTM/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B001ECQVTM">SD
card</a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B001ECQVTM" style="border:none !important;
margin:0px !important;" width="1"/> without any problems. </p>

<p> Extract the OpenELEC image from the zip file. For this tutorial, I'll
assume that you have used the same image as I did and have extracted it to
<code>~/Downloads/OpenELEC/r12604.img</code>. </p>

<p> Next, we need to figure out what device the SD card will be. Open up a
terminal window, as I will walk through how to flash your SD card through the
command line. Then, before you have connected your SD card, we want to see
what devices are currently listed. </p>

<p> Run <code>df -h</code>. </p>

<p> Connect the SD card reader with the SD card inside.

  </p><p> Run <code>df -h</code> again. Compare this output to that of the
  previous command output. There should be one additional device name, for
  example, /dev/disk3s1. Write this down. We will use this later to flash the
  card.t

  </p><p> Next, we need to unmount the partition so that we can overwrite the
  disk:

</p><pre>sudo diskutil unmount /dev/disk3s1
</pre>

<p> Note that unmounting a partition is slightly different than ejecting the
disk. When we unmount, we tell the Operating System that we are not using
that device as a file system anymore, but it keeps a pointer around to the
device so that we can write directly to it as a raw device. </p>

<p> Next, we need to figure out the raw device name so that we can flash it.
Verbatim from the embedded Linux wiki, including a stern warning:

</p><blockquote>
  <p>Using the device name of the partition work out the raw device name for the
  entire disk, by omitting the final "s1" and replacing "disk" with "rdisk"
  (this is very important: you will lose all data on the hard drive on your
  computer if you get the wrong device name). Make sure the device name is the
  name of the whole SD card as described above, not just a partition of it (for
  example, rdisk3, not rdisk3s1. Similarly you might have another SD drive
  name/number like rdisk2 or rdisk4, etc. -- recheck by using the <code>df
  -h</code> command both before &amp; after you insert your SD card reader into
  your Mac if you have any doubts!):

  </p><p> For example, /dev/disk3s1 =&gt; /dev/rdisk3 </p>
</blockquote>

<p> Next, we will write the image to the card using the <code>dd</code>
command. Triple-check that you have the correct disk name and make sure you
have a good backup, because it is very easy to accidently overwrite your data
with the <code>dd</code> command.

</p><pre>sudo dd bs=1m if=~/Downloads/OpenELEC/r12604.img of=/dev/rdisk3
</pre>

<p> This command will run without any output, working to copy byte-for-byte
the image file to the SD card. Apparently, pressing Ctrl-T (SIGINFO) will
display some statistics, though. </p>

<p> Finally, we can eject the disk. We can then take the card out, plug it
into the Raspberry Pi. If all went well, the Raspberry Pi will boot to
OpenELEC. </p>

<pre>sudo diskutil eject /dev/rdisk3
</pre>

<h2>Expanding the SD card /storage partition</h2>

<p> Since OpenELEC uses Ext4 for its storage partition, we aren't able to
resize the partition from Disk Utility as one normally resizes partitions on
a Mac. Instead, we need to boot to Linux. The easiest way to do this is to
use GParted. Since they provide a <a href="http://gparted.sourceforge.net/livecd.php">GParted live CD</a>, I will
use that, though any other "live" Linux distribution should work just as
well, so long as it includes GParted.

</p><p> I tried to edit the SD card partitions from within a VirtualBox virtual
machine, but I was unable to get the SD card to show up from within the
virtualized GParted live CD. Instead, I booted the computer directly to the
live CD.

</p><p> First, one needs to burn the CD. To do this from a Mac, I
right/control-clicked the iso file and said open with Disk Utility. With the
iso file selected and a blank CD in the drive, click Burn toward the top of
Disk Utility. Once the Press C during startup. (Apple has a nice <a href="http://support.apple.com/kb/HT1533">Support Article</a> explaining
various possible commands during startup.) </p>

<p> Once booted to the live CD, GParted will automatically appear. In the
upper-right corner, there is a drop-down to selected devices. Select the SD
card. Once selected, you should see two partitions and a lot of unallocated
space.

</p><p> Resize the second, ext4 partition to fill the unallocated space. Then,
click apply to actually make the change on the SD card. Now, you can safely
shut down and remove the GParted Live CD. The SD card should be ready to use
in the Raspberry Pi with lots of space on the storage partition, now. </p>

<h2>Configuring the network</h2>

<p> I found with the <a href="http://www.amazon.com/gp/product/B003E6493G/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B003E6493G">ASUS
USB-N10</a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B003E6493G" style="border:none !important;
margin:0px !important;" width="1"/> wireless adapter, both <a href="http://www.raspbmc.com/">Raspbmc</a> and OpenELEC were able to use the
wireless card without any additional software. OpenELEC seems to work for a
larger number of chipsets, though. I was using a <a href="http://www.amazon.com/gp/product/B002WBX9C6/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B002WBX9C6">TP-Link
wireless adapter</a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B002WBX9C6" style="border:none !important;
margin:0px !important;" width="1"/> for my Linux desktop machine, and in my testing it
worked in OpenELEC but not Raspbmc. </p>

<p> To tell OpenELEC you want to use wireless, go to System → OpenELEC.
This will open a configuration dialog. Go to the Network submenu. The
properties to change for wireless are Network Technology := WLAN and Network
Interface := wlan0.

</p><p> I set a static IP address so that it would be easier to use the remote
control app on my iPhone. This step is not strictly necessary, though. For
the DNS servers, I'm actually using <a href="https://developers.google.com/speed/public-dns/">Google's Public
DNS</a>, rather than that provided by my service provider. It's pretty easy
to remember: 8.8.8.8 and 8.8.4.4. Supposedly, this should make the web <a href="http://lifehacker.com/5835775/google-dns-and-opendns-users-are-getting-a-web-speed-boost">
faster, </a> but I'm mostly using it because I don't like the way my ISP
provides search results for mis-typed domain names. </p>

<p> Finally, I typed in the SSID for my home router. I had to type this in,
rather than detect it. Since <a href="http://www.raspbmc.com/">Raspbmc</a> is
based on a full Gnome environment, it can use network-manager to detect
wireless networks. For this reason, <a href="http://www.raspbmc.com/">it</a>
might be a better choice than OpenELEC if your wireless card works with it.
</p>

<h2>Setup Sharing</h2>

<p> To make file transfers easier, I setup file sharing on my Raspberry Pi
through Services Settings -&gt; UPnP. This will also make it easier to use an
app as a remote control, since it will be able to autodetect your Raspberry
Pi. </p>

<img alt="Setup UPnP sharing in settings." src="/blog/2012/12/26/software-for-building-a-raspberry-pi-pbs-streaming-device/upnp-share.jpg"/>

<p> Similarly, go to Webserver and allow control via HTTP. This will setup a
simple website on your Raspberry Pi so that you can connect to it from other
computers on your network to use the kitchy interface as a remote control. It
will also make it possible to use a dedicated app on your iPhone as a remote
control, also. </p>

<h2>Adding Repositories</h2>

<p> Since OpenELEC uses a new version of XBMC (Frodo), the official
repositories have few, if any plugins for it. Instead, I added the <a href="http://passion-xbmc.org/addons/">Passion xbmc</a> repository to my
Raspberry Pi so that I could install extra addons. </p>

<p> Download the <a href="http://passion-xbmc.org/addons/Download.php/repository.passion.xbmc.org/repository.passion.xbmc.org-2.0.2.zip">
zip file for the Passion XBMC repository
</a> (Right-click, Save target as) to a USB flash/thumb drive. I found this repository and many others listed on the
<a href="http://wiki.xbmc.org/index.php?title=3rd_party_add-on_repositories">
XBMC wiki.
</a> Even better than saving it to a USB drive, when the Raspberry Pi is on, I can see a share drive from my Mac. I have been saving plugins to the Videos folder, since that is on the much larger "storage" partition we resized earlier with GParted.
</p>

<img alt="download folder as the raspberry pi share" src="/blog/2012/12/26/software-for-building-a-raspberry-pi-pbs-streaming-device/download-repository.png" title="I'm using the Videos directory on the Raspberry Pi to hold plugins."/>

<h2>Installing addons</h2>

<p> After adding the additional repositories, run Add ons -&gt; Video -&gt; Get
more. This will download a list of many different addons available in the
repository. The one I have used most is the PBS app, which streams episodes
available from PBS's website. </p>

<p>
The version listed in the repository is currently listed as broken (v2.0.8),
but I was able to install and use v2.0.2 <a href="https://github.com/stacked/plugin.video.pbs/archive/81e4b764969f009491b1b664b42553e9dc175eb7.zip">
directly from stacked's repository </a> without any problems.
</p>


<h2>Using iPhone as a remote control</h2>

<p>
Rather than use a keyboard and mouse, I am using my iPhone as a remote
control over WiFi. To do this, I am using the <a href="https://itunes.apple.com/us/app/official-xbmc-remote/id520480364?mt=8">Official
XBMC Remote</a> app.

</p><p>
The setup is pretty simple. Share your Raspberry Pi via UPnP to allow
autodetect to work. This is most important if you haven't setup a static IP
address. Second, enable the XBMC web server to allow the app to control your
Raspberry Pi with HTTP. Both these are under settings.

</p><p> While the app isn't anything special, I find that as a simple remote
control, this was a very easy thing to setup. I mostly just use the remote
control part of the app, basically using my phone for arrow keys and the
enter key.
</p>
      ]]></description>
      <pubDate>Wed, 26 Dec 2012 13:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2012/12/26/software-for-building-a-raspberry-pi-pbs-streaming-device/</guid>
      <link>https://www.timswast.com/blog/2012/12/26/software-for-building-a-raspberry-pi-pbs-streaming-device/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Building a PBS streaming device with Raspberry Pi and OpenELEC XBMC : Part 1, Hardware</title>
      <description><![CDATA[
        
<p class="p-summary">In this series, I'll go from start to finish on how to
build a home-theater computer with Raspberry Pi and the OpenELEC XBMC
Operating System. At the end we'll be able to install XBMC plugins to stream
videos, including PBS.</p>

<p>
This first article about the hardware needed applies to any Raspberry Pi project, not just a video streaming device.
</p>

<ol>
    <a href="/blog/2012/12/26/hardware-for-building-a-raspberry-pi-pbs-streaming-device/"><li>
        Hardware for a Raspberry Pi PBS Streaming Device
    </li></a>
    <a href="/blog/2012/12/26/software-for-building-a-raspberry-pi-pbs-streaming-device/"><li>
        Installing software for a Raspberry Pi PBS Streaming Device
    </li></a>
</ol>


<h2>Overview</h2>

<p>
Before we get started, we need to acquire all the needed hardware.

</p><ul>
    <li><a href="http://www.raspberrypi.org/">Raspberry Pi</a> ($35)
    <p>
    Technically, this is just $35, but when I ordered directly from a supplier listed on the official website, it took 8 months for me to get my pi. For the impatient, I have seen it listed on
<a href="http://www.amazon.com/gp/product/B009SQQF9C/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B009SQQF9C">Amazon with Prime eligible shipping</a>.<img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B009SQQF9C" style="border:none !important; margin:0px !important;" width="1"/>
    </p></li>
    <li>Raspberry Pi Enclosure ($6-$20)
    <p>
    The Raspberry Pi comes as a bare circuit board. Luckily, there are a few vendors who sell plastic cases, including this assortment of <a href="http://www.amazon.com/gp/product/B008TCUXLW/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B008TCUXLW">Raspberry Pi Enclosures</a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B008TCUXLW" style="border:none !important; margin:0px !important;" width="1"/> on Amazon.
    </p></li>
    <li>HDMI TV or Monitor ($100+)
    <p>
    Most folks will already have a television or monitor supporting HDMI, which
    is part of the allure of a Raspberry Pi. Since it is so small, it can be
    yet another device on the TV stand. Ours sits next to our <a href="http://www.amazon.com/gp/product/B005CLPP84/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B005CLPP84">Roku</a>.
        <img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B005CLPP84" style="border:none !important;
    margin:0px !important;" width="1"/> If not, there are many

   <a href="http://www.amazon.com/s/?_encoding=UTF8&amp;tag=thnebetu-20&amp;linkCode=ur2&amp;camp=1789&amp;creative=390957&amp;rh=n%3A172282%2Ck%3AHDMI%20monitor%20with%20integrated%20speakers&amp;field-keywords=HDMI%20monitor%20with%20integrated%20speakers&amp;url=search-alias%3Delectronics" target="_blank">HDMI-input
       monitors that come with integrated speakers</a><img alt="" border="0" height="1" src="https://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=ur2&amp;o=1" style="border:none !important; margin:0px
   !important;" width="1"/>  to choose from.
    </p></li>
    <li>
<a href="http://www.amazon.com/gp/product/B003L1ZYYM/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B003L1ZYYM">HDMI Cable</a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B003L1ZYYM" style="border:none !important; margin:0px !important;" width="1"/> ($6)

    <p>
It's likely you have one of these already, but if not any
<a href="http://www.amazon.com/gp/product/B003L1ZYYM/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B003L1ZYYM">HDMI
    cable</a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B003L1ZYYM" style="border:none !important;
margin:0px !important;" width="1"/>
    should work fine.
    </p></li>
    <li>USB charger (700 mAmp)

    <p>
    The Raspberry Pi runs off USB for its power. Not just any USB charger
    will work, though, since the Raspberry Pi is very picky about voltages and
    needs something that can supply enough power. I'm using the <a href="http://www.amazon.com/s/?_encoding=UTF8&amp;tag=thnebetu-20&amp;linkCode=ur2&amp;camp=1789&amp;creative=390957&amp;field-keywords=apple%20iphone%20usb%20power%20adapter&amp;url=search-alias%3Delectronics" target="_blank">iPhone
        USB charger</a>,<img alt="" border="0" height="1" src="https://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=ur2&amp;o=1" style="border:none !important; margin:0px
    !important;" width="1"/> but a
<a href="http://www.amazon.com/gp/product/B006GWO5WK/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B006GWO5WK">Kindle
    Fire charger</a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B006GWO5WK" style="border:none !important;
margin:0px !important;" width="1"/> should work well, too.

    </p></li>
    <li>
    <a href="http://www.amazon.com/gp/product/B006GWO5NE/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B006GWO5NE">Micro
        USB Cable</a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B006GWO5NE" style="border:none !important;
    margin:0px !important;" width="1"/>

    <p>
    There is a good chance you have one of these already, especially if you
    have an Android device. You may want to pick an
<a href="http://www.amazon.com/gp/product/B006GWO5NE/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B006GWO5NE">extra one</a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B006GWO5NE" style="border:none !important; margin:0px !important;" width="1"/>
    up to have a
    dedicated cable for your Raspberry Pi, though.
    </p></li>
    <li>
    <a href="http://www.amazon.com/gp/product/B003E6493G/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B003E6493G">Wireless
        USB Adapter</a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B003E6493G" style="border:none !important;
    margin:0px !important;" width="1"/>

    <p>
    If you don't want to run an Ethernet cable to your TV stand, get this
    <a href="http://www.amazon.com/gp/product/B003E6493G/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B003E6493G">Wireless
        USB Adapter</a>.<img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B003E6493G" style="border:none !important;
    margin:0px !important;" width="1"/>
    This
    <a href="http://www.amazon.com/gp/product/B003E6493G/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B003E6493G">ASUS
        USB-N10</a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B003E6493G" style="border:none !important;
    margin:0px !important;" width="1"/> worked out of the box for me. I didn't need to install
    any special drivers.
    </p></li>
    <li>Ethernet cable

    <p>
    If one is not going the wireless route, this will be connected to your
    Raspberry Pi at all times. Otherwise, it is nice to have this connected
    while we are setting up so we don't have to worry about configuring
    wireless right away.
    </p></li>
    <li>SD card

    <p>
    The Raspberry Pi can be finicky about what SD cards it will accept. I used this
<a href="http://www.amazon.com/gp/product/B001ECQVTM/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B001ECQVTM">Transcend 16GB SD card</a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B001ECQVTM" style="border:none !important; margin:0px !important;" width="1"/>
without any problems. The
<a href="http://www.amazon.com/gp/product/B0058Gh2IK/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B0058Gh2IK">AmazonBasics</a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B0058Gh2IK" style="border:none !important; margin:0px !important;" width="1"/> card should work fine, too.

    </p></li>
    <li>SD-card reader

    <p>
    The internal card reader on my MacBook <em>did not work</em>. Instead, I had to buy an external
    <a href="http://www.amazon.com/gp/product/B004QHPYT0/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B004QHPYT0">iogear Memory Card Reader/Writer</a>.<img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B004QHPYT0" style="border:none !important; margin:0px !important;" width="1"/>
    Once I got the external reader, I was able to flash the SD card for the Raspberry Pi operating system.
    </p></li>
    <li>USB mouse

    <p>
    Any mouse with a USB cable should do fine.
    </p></li>
    <li>USB keyboard

    <p>
    It needs to be a USB keyboard, as there are no old-style keyboard inputs on the Raspberry Pi.
    </p></li>
    <li>USB hub ($5)

    <p>
    There are only two USB ports on the Raspberry Pi. To have the mouse, keyboard, and wireless card plugged in you will need a hub. The Raspberry Pi forums say a powered USB hub is required, but I used the
<a href="http://www.amazon.com/gp/product/B000Q8UAWY/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B000Q8UAWY">Belkin USB Ultra-Mini Hub</a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B000Q8UAWY" style="border:none !important; margin:0px !important;" width="1"/>
    that I already had to plug in the mouse and keyboard, and it worked fine.
    </p></li>
    <li>A computer or laptop (Mac/Windows/Linux)

    <p>
    In order to get the operating system setup for the Raspberry Pi, one will need to flash the SD card from a computer or laptop. I did this from a
<a href="http://www.amazon.com/gp/product/B0074712UY/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B0074712UY">MacBook Pro</a>.<img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B0074712UY" style="border:none !important; margin:0px !important;" width="1"/>
    My instructions in the
    <a href="/blog/2012/12/26/software-for-building-a-raspberry-pi-pbs-streaming-device/">software article</a>
    will show what I did from my Mac.
    </p></li>
</ul>

<p>
That is quite the shopping list, but it is possible, even likely, that you already have most of these things.




</p><h2>Putting together the enclosure</h2>

<p>
Once you get your Raspberry Pi and its case, it's time to put it together. I got the case through Allied Electronics, which does not include a hole for the general purpose I/O ports. That's OK, though, since we won't be using them for this project. For future projects, I'll want to get a different case, like the
    <a href="http://www.amazon.com/gp/product/B008TCUXLW/ref=as_li_ss_tl?ie=UTF8&amp;tag=thnebetu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B008TCUXLW">HungryPi
        enclosures</a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=thnebetu-20&amp;l=as2&amp;o=1&amp;a=B008TCUXLW" style="border:none !important;
    margin:0px !important;" width="1"/>, which have a hole to put a ribbon cable connecting to the GPIO ports.

</p><p>
This is the Raspberry Pi and the Allied Electronics case I bought for it. Look at how tiny it is!

<img alt="Raspberry Pi and case with
my hand for scale" src="/blog/2012/12/26/hardware-for-building-a-raspberry-pi-pbs-streaming-device/pi-and-case-with-hand-for-scale.jpg" title="Look how tiny and cool it is!"/>


</p><p>
The first step to put it together is to place the Raspberry Pi on the base of the enclosure. Put the left side under the small plastic clips. This leaves the right side (with the GPIO ports) just above the large plastic clips.
<img alt="Raspberry Pi over bottom part of enclosure" src="/blog/2012/12/26/hardware-for-building-a-raspberry-pi-pbs-streaming-device/clip-it-in.jpg" title="The side not shown is under the small clips already.
Here we see the board above the large clips."/>

</p><p>
Then, we just clip the board in.
<img alt="Raspberry Pi clipped over bottom part of enclosure" src="/blog/2012/12/26/hardware-for-building-a-raspberry-pi-pbs-streaming-device/its-clipped.jpg" title="The bottom part is clipped in."/>

</p><p>
Finally, we put the top part of the enclosure on. Simply line up the slots with the corresponding components and click the top into place.
<img alt="Placing the top part of the enclosure on our raspberry pi." src="/blog/2012/12/26/hardware-for-building-a-raspberry-pi-pbs-streaming-device/put-on-top.jpg" title="Line up the components and clip it in."/>



</p><h2>Connecting the components.</h2>

<p>
Now that the Raspberry Pi is pretty well protected in its enclosure, we can connect the components we will need to it. The two most important things for the Raspberry Pi are the Operating System SD card and the power connection. These are necessary for any Raspberry Pi project, be it a web server, home automation device, or video streaming device.

</p><p>
For building a streaming device, first follow the directions in the <a href="/blog/2012/12/26/software-for-building-a-raspberry-pi-pbs-streaming-device/">software article</a> for flashing the OpenELEC operating system onto the SD card.

<img alt="SD card and power plugged in." src="/blog/2012/12/26/hardware-for-building-a-raspberry-pi-pbs-streaming-device/power-sd-top.jpg" title="SD card and power plugged in, notice the SD card is upside down."/>

</p><p>
Plug the power cable into the micro-USB port on the Raspberry Pi. The SD card is right next to the micro-USB port. Note that the card needs to go in upside down.

<img alt="SD card and power plugged in." src="/blog/2012/12/26/hardware-for-building-a-raspberry-pi-pbs-streaming-device/power-sd-bottom.jpg" title="SD card and power plugged in, notice the SD card is upside down."/>

</p><p>
Then, plug in the rest of the devices. This should be pretty straight-forward, since the HDMI and USB ports are well labeled (at least on the case I got).

<img alt="SD card and power plugged in." src="/blog/2012/12/26/hardware-for-building-a-raspberry-pi-pbs-streaming-device/everything-plugged-in.png" title="SD card and power plugged in, notice the SD card is upside down."/>

</p><p>
One last thing I have noticed is that for the display to show up, the monitor or TV needs to be on and connected to the HDMI input before plugging the power into the Raspberry Pi.
</p>
      ]]></description>
      <pubDate>Wed, 26 Dec 2012 12:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2012/12/26/hardware-for-building-a-raspberry-pi-pbs-streaming-device/</guid>
      <link>https://www.timswast.com/blog/2012/12/26/hardware-for-building-a-raspberry-pi-pbs-streaming-device/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Tim's Pixel Art : Episode 1</title>
      <description><![CDATA[
        
<p class="e-summary">Lately, I've been playing with <a href="https://www.commonsensemedia.org/app-reviews/pixeld">Disney PIXEL'D</a>
on my iPad, and I've been enjoying using it a lot. While I've been able to
make pixel art with other programs on my computer, this is by far the easiest
program I've used to make pixel art animations.</p>

<p>
So far I've been using the free version, and it has worked great. The stamp
features are geared more towards kids, but this is a very well done
application for adults to use, too. The $4.99 pro-pack gets you 7 layers
instead of 3, camera import, additional animation frames, and the ability to
remove the pixel'd logo from exporting large animations.

</p><p>
My only complaint is that I couldn't figure out how to remove animation
frames once they are added. As a result, the first animation I made turned
from a walking cowboy into a dancing cowboy.

<img alt="dancing cowboy pixel art" class="pixel-art u-photo" src="/blog/2012/12/16/pixel-art-episode-1/dancing-cowboy.gif"/>

</p><p>
I think it turned out well, though.

</p><p>
Mostly, I have kept to a 16x16 pixel canvas. It limits the amount of detail I
can add, but it's a very different experience creating art. For example, even
though it is far from anatomically correct, the cowboy's head and hat are 8
pixels high, exactly half of the whole canvas.

</p><p>
We humans place such an emphasis on faces, though, this cowboy with a head as
large as his body hardly looks strange to us. In order to create a character
at 16x16 pixels, I find that one needs to stretch proportions a bit. Faces
are much too important to place at <a href="http://en.wikipedia.org/wiki/Body_proportions#Basics_of_human_proportions">1/7th
to 1/8th of the whole</a>, since that would give us only 2 or 3 pixels of
height to work with.

</p><p>
Using a this rule-of-thumb to use half the canvas, I created a portrait of a
cat. The head-to-body proportions are cartoonish, but it allows me to create
a cat <em>character</em>.

<img alt="gray cat pixel art" class="pixel-art u-photo" src="/blog/2012/12/16/pixel-art-episode-1/arthur.gif"/>

</p><p>
I drew this bus while on the bus. Breaking from my previous drawings, it uses
a canvas of size 32x16.

<img alt="bus with little puff from exhaust." class="pixel-art u-photo" src="/blog/2012/12/16/pixel-art-episode-1/bus.gif"/>

</p><p>
This “snail” started life as something similar to the USB
trident-style symbol <img alt="USB trident logo" src="/blog/2012/12/16/pixel-art-episode-1/usb.svg" style="display: inline; height: 1em; width: 1.6em;"/>. I find it interesting
how little animation it takes to turn a symbol to a strange creature.

<img alt="a snail with three eyes." class="pixel-art u-photo" src="/blog/2012/12/16/pixel-art-episode-1/snail.gif"/>
</p>
      ]]></description>
      <pubDate>Sun, 16 Dec 2012 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2012/12/16/pixel-art-episode-1/</guid>
      <link>https://www.timswast.com/blog/2012/12/16/pixel-art-episode-1/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Matplotlib 1.1.0 for Solaris on SPARC and x86, Part 3: Packaging</title>
      <description><![CDATA[
        
<p class="p-summary">This is part 3 of a three-part series on building and
packaging matplotlib as a multi-architecture, Solaris IPS package. In this
tutorial, I go through creating a multiple architecture (fat) IPS package.</p>

<ol>
  <a href="/blog/2012/08/06/compiling-matplotlib-with-solaris-studio/"><li>
    Compiling matplotlib 1.1.0 for Solaris on SPARC and x86
  </li></a>
  <a href="/blog/2012/08/06/setting-up-ips-for-multi-arch-packages/"><li>
    Setting up Solaris IPS servers to host packages for SPARC and x86
  </li></a>
  <a href="/blog/2012/08/06/packaging-matplotlib-for-multi-arch/"><li>
    Packaging matplotlib 1.1.0 for Solaris on SPARC and x86
  </li></a>
</ol>

<p>I assume that the software has already been built and "installed" to a
prototype installation folder on x86 and SPARC machines (I go through this
for <a href="http://matplotlib.sourceforge.net">matplotlib</a> in <a href="/blog/2012/08/06/compiling-matplotlib-with-solaris-studio/">part 1</a>). Second, I
assume that three IPS servers are running, which I go through in <a href="/blog/2012/08/06/packaging-matplotlib-for-multi-arch/">part 2</a>.

</p><h2>Create the IPS package / manifest</h2>

<p>Since the directions are exactly the same for both sparc and x86, I only
include one set of directions here. Where you see $ARCH, replace it with
sparc on a sparc machine and i386 on an Intel machine.

</p><p>Generate initial list of actions based on the "prototype install" folder.

</p><pre>$ pkgsend generate ~/install_$ARCH &gt; mypackage.$ARCH.pkgsend
</pre>

<p>Add metadata. For larger projects, one could use pkgmogrify to
automatically fill in $ARCH and other variables, but I just use a text file
to keep things simple for this example.

</p><pre>$ vim mypackage.$ARCH.metadata
set name=pkg.fmri value=pkg://mycompany/mypackage
set name=variant.arch value=$ARCH
set name=pkg.description value="my package example."
set name=pkg.summary value="my package example."
</pre>

<p>Combine.

</p><pre>$ cat mypackage.$ARCH.metadata mypackage.$ARCH.pkgsend &gt; mypackage.$ARCH.initial
</pre>

<p>When I created my package, the <code>/usr</code> directory was listed as
having group <code>bin</code>. This conflicts with standard Solaris packages
which expect the group to be <code>sys</code>, so this line needs to be
changed. If a <code>/usr/share</code> line is present, it may need to be
changed, too.

</p><pre>$ vim mypackage.$ARCH.initial
...
# Change this line from:
dir group=bin mode=0755 owner=root path=usr
# To:
dir group=sys mode=0755 owner=root path=usr
</pre>

<p>Generate file dependencies.

</p><pre>% pkgdepend generate -d ./install_$ARCH mypackage.$ARCH.initial &gt; mypackage.$ARCH.depend
</pre>

<p>Resolve to package dependencies. This creates a *.res file. The
justification for creating a file rather than outputting to stdout is that it
can resolve multiple files to save work this way.

</p><pre>% pkgdepend resolve mypackage.$ARCH.depend
</pre>

<p>Check out the resolution file and append it to the manifest.

</p><pre>% ls *.res
mypackage.$ARCH.depend.res
% cat mypackage.$ARCH.initial mypackage.$ARCH.depend.res &gt; mypackage.$ARCH.manifest
</pre>

<p>Take care of cosmetic issues, like proper line wrapping at 80 characters.

</p><pre>% pkgfmt mypackage.$ARCH.manifest
</pre>

<p>As a final check, run pkglint. Be sure to fix any errors that appear.

</p><pre>% pkglint mypackage.$ARCH.manifest
</pre>

<p>Give manifest a *.p5m extension for publishing.

</p><pre>% cp mypackage.$ARCH.manifest mypackage.$ARCH.p5m
</pre>

<p>Finally, publish the packages to the appropriate server. In this example I
use http://myipsserver:8000 for sparc and http://myipsserver:8001 for x86.

</p><pre>% sudo pkgsend publish \
      -d ./install_sparc \
      -s http://myipsserver:8000 \
      mypackage.sparc.p5m
% sudo pkgsend publish \
      -d ./install_i386 \
      -s http://myipsserver:8001 \
      mypackage.i386.p5m
</pre>

<h2>Merge the packages</h2>

<p>Finally, now that each architecture-specific package is published, we can
merge the two repositories into the multiple architecture repository.

</p><pre>$ pkgmerge -s arch=sparc,http://myipsserver:8000 \
    -s arch=i386,http://myipsserver:8001 \
    -d http://myipsserver
</pre>


<h2>Test the package</h2>

<p>The final step is to install the package and see if it worked. I recommend
testing on a sparc machine and an x86 machine. I assume that the IPS (pkg
command) publishers are setup correctly (pointing to the multiple
architecture repository and with the correct publisher name).

</p><pre>pkg install pkg://mycompany/mypackage
</pre>


<h2>Resources</h2>

<ul>
    <li>
        <a href="https://blogs.oracle.com/barts/entry/phattening_packages_supporting_multiple_variants">General idea for creating "fat" packages from Bart Smaalders (an IPS developer)</a>
    </li>
    <li>
        <a href="http://docs.oracle.com/cd/E23824_01/html/E21796/pkgmerge-1.html">pkgmerge man page</a>
    </li>
</ul>

      ]]></description>
      <pubDate>Mon, 06 Aug 2012 14:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2012/08/06/packaging-matplotlib-for-multi-arch/</guid>
      <link>https://www.timswast.com/blog/2012/08/06/packaging-matplotlib-for-multi-arch/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Matplotlib 1.1.0 for Solaris on SPARC and x86, Part 2:
  Setting up Solaris IPS servers for multiple architecture (fat)
  packages</title>
      <description><![CDATA[
        
<p class="p-summary">This is part 2 of a three-part series on building and
packaging matplotlib as a multi-architecture, Solaris IPS package.
</p>

<ol>
  <a href="/blog/2012/08/06/compiling-matplotlib-with-solaris-studio/"><li>
    Compiling matplotlib 1.1.0 for Solaris on SPARC and x86
  </li></a>
  <a href="/blog/2012/08/06/setting-up-ips-for-multi-arch-packages/"><li>
    Setting up Solaris IPS servers to host packages for SPARC and x86
  </li></a>
  <a href="/blog/2012/08/06/packaging-matplotlib-for-multi-arch/"><li>
    Packaging matplotlib 1.1.0 for Solaris on SPARC and x86
  </li></a>
</ol>

<img alt="pkg logo" src="/blog/2012/08/06/images/pkg-block-logo.png" style="float: right; width: 5em;"/>

<p>IPS made is a huge step forward compared to SysV packaging. One can still
create and use SysV packages in Solaris 11, but why would you? IPS provides
easy package distribution, upgrades, dependency resolution, and it's still <a href="http://hub.opensolaris.org/bin/view/Project+pkg/">open</a> <a href="http://src.opensolaris.org/source/xref/pkg/gate/">source</a>!
</p>

<p>
Conceptually, IPS is a bit different from System V packages. An IPS package is
not just a collection of scripts and files. Instead, IPS works by specifying
"actions" (e.g. create directory, copy file, etc.). Similar to other packaging
systems, it also includes metadata in a manifest file (e.g. pkg dependencies,
descriptions).
</p>


<h2>Overview</h2>

<p>
These instructions will go through the steps necessary to setup IPS servers
needed to create and host multiple architecture (fat) IPS packages. Basically,
we will create three repositories and three IPS servers to host them. To keep
things as simple as possible, I'll assume they will all be hosted from the
same physical machine (and the same zone).
</p>

<p>
For projects that need to be compiled for SPARC and x86 (IPS calls them the
sparc and i386 variants, respectively), ideally one would create a
"universal" package that can be installed to sparc or x86 machines. The way
this is done in Solaris is to create a separate package for each "variant" and
then to "merge" them into one package. This means three IPS servers are
required, one for each architecture, and one for the merged package.
</p>

<h2>Concepts</h2>

The last paragraph had quite a few terms in it that have special meaning in
IPS-speak. Learning the following terms will help quite a bit in understanding
what needs to be done to create and host IPS packages.

<dl>
    <dt>package</dt>
    <dd>This is the "what" in IPS. What is it you would like to install?</dd>
    <dt>publisher</dt>
    <dd>This is the "who" in IPS. Who is it that is providing this package?</dd>
    <dt>variant</dt>
    <dd>This is more specifically, what kind of package are you installing?
    Examples include sparc/i386 and debug/non-debug.</dd>
    <dt>repository</dt>
    <dd>This is a collection of packages. It can include packages from
    multiple publishers, for example, if one wanted to mirror Oracle packages
    in addition to internally-created packages.</dd>
    <dt>server</dt>
    <dd>This is the software responsible for <em>hosting</em> a repository.</dd>
    <dt>merge</dt>
    <dd>This means combining two IPS package variants into one package.</dd>
</dl>

<p>
Note that the publisher name is associated with a package, not the particular
server. A server does have a default publisher, though. When you query for
packages and send new packages to the server, the default publisher is used
unless otherwise specified.

</p><h2>Create repositories</h2>

<p>
In order to create a package which supports multiple architectures, we need
three repositories. One for sparc variants, one for i386 variants, and one for
the merged packages. This does not mean we need three machines, or even three
zones. We will simply run multiple IPS servers, each on a different port.

</p><p>
To keep the instructions simple, we are going to use the same default
publisher name for all three servers we create.  Remember, the publisher is
supposed to identify "who" publishes a package, not "where" they are
published. It makes sense that each repository should have the same default
publisher name. For this example we will use "mycompany" as the publisher.

</p><h2>Setup local ZFS filesystems</h2>

The first thing we will do is create ZFS filesystems for each repository.

<pre>  zfs create rpool/export/ips
  zfs create rpool/export/ips/default
  zfs create rpool/export/ips/sparc
  zfs create rpool/export/ips/x86
  zfs set mountpoint=/export/ips rpool/export/ips
</pre>

Next, we create a skeleton for each IPS repository.

<pre>  pkgrepo create /export/ips/default
  pkgrepo create /export/ips/sparc
  pkgrepo create /export/ips/x86
</pre>

Finally, we set the publisher name. As I said before, this is the "who"
publishes the package, not "where" it is published. I use "mycompany" in this
example, since I'm creating a package for my company's internal use.

<pre>  pkgrepo set -s /export/ips/default publisher/prefix=mycompany
  pkgrepo set -s /export/ips/sparc publisher/prefix=mycompany
  pkgrepo set -s /export/ips/x86 publisher/prefix=mycompany
</pre>


<h2>Setup SMF-based IPS servers</h2>

For this example, we create multiple instances of the SMF-based pkg server.
There are other options, file-system based sharing for example, but it seems
that creating multiple server instances is the best-supported method of
hosting.

<h2>Setup IPS default (multi-architecture) server</h2>

The first thing we will do is setup the default server on the standard http port (80).

<pre>  svccfg -s application/pkg/server setprop pkg/port=80
</pre>

Next, tell it which repository to use.

<pre>  svccfg -s application/pkg/server setprop pkg/inst_root=/export/ips/default
</pre>

Since we want to be able to publish to this repository, change the readonly property to false.

<pre>  svccfg -s pkg/server setprop pkg/readonly=false
</pre>

Refresh the pkg/server SMF service, to make sure the configuration changes get loaded.

<pre>  svcadm refresh application/pkg/server
</pre>

Start the repository service.

<pre>  svcadm enable application/pkg/server
</pre>

The IPS server can now be reached at http://myipsserver Check that it is running with the svcs command.

<pre>  % svcs pkg/server
  STATE          STIME    FMRI
  online         May_08   svc:/application/pkg/server:default
</pre>


<h2>Setup IPS sparc server</h2>

We need to add a new instance to SMF. Since we're already using the default
instance, we give it the name "sparc". We then need to do some basic
configuration.

<pre>  svccfg -s pkg/server add sparc
  svccfg -s pkg/server:sparc addpg pkg application
  svccfg -s pkg/server:sparc addpg general framework
  svccfg -s pkg/server:sparc setprop general/complete=astring:\"\"
  svccfg -s pkg/server:sparc setprop general/enabled=boolean: true
</pre>

Next, we set the port number. Since 80 is used already, we can use 8000.

<pre>  svccfg -s pkg/server:sparc setprop pkg/port=8000
</pre>

Set the root repository directory.

<pre>  svccfg -s pkg/server:sparc setprop pkg/inst_root=/export/ips/sparc
</pre>

Change the readonly property to false.

<pre>  svccfg -s pkg/server:sparc setprop pkg/readonly=false
</pre>

Refresh to get configuration changes.

<pre>  svcadm disable pkg/server:sparc
  svcadm refresh pkg/server:sparc
</pre>

Start the server.

<pre>  svcadm enable pkg/server:sparc
</pre>

The IPS server can now be reached at http://myipsserver:8000


<h2>Setup IPS x86 server</h2>

Now we'll add the final server instance to SMF. As before, we're already using
the default instance, so we give this one a name. Finally, we add basic
configuration.

<pre>  svccfg -s pkg/server add x86
  svccfg -s pkg/server:x86 addpg pkg application
  svccfg -s pkg/server:x86 addpg general framework
  svccfg -s pkg/server:x86 setprop general/complete=astring:\"\"
  svccfg -s pkg/server:x86 setprop general/enabled=boolean: true
</pre>

Next, we set the port number. Since 80 and 8000 are already use, we can use 8001.

<pre>  svccfg -s pkg/server:x86 setprop pkg/port=8001
</pre>

Set the root repository directory.

<pre>  svccfg -s pkg/server:x86 setprop pkg/inst_root=/export/ips/x86
</pre>

Change the readonly property to false.

<pre>  svccfg -s pkg/server:x86 setprop pkg/readonly=false
</pre>

Refresh to get configuration changes.

<pre>  svcadm disable pkg/server:x86
  svcadm refresh pkg/server:x86
</pre>

Start the server.

<pre>  svcadm enable pkg/server:x86
</pre>

The IPS server can now be reached at http://myipsserver:8001


<h2>Build and publish the package</h2>

Now that we have all the IPS servers setup, we can build and publish our
package. In <a href="/blog/2012/08/06/packaging-matplotlib-for-multi-arch/">part 3</a>, we
will create a multi-architecture (fat) IPS package for matplotlib, which we
compiled in <a href="/blog/2012/08/06/compiling-matplotlib-with-solaris-studio/">part 1</a>.


<h2>Resources</h2>


<ul>
    <li>
        <a href="http://www.oracle.com/technetwork/systems/hands-on-labs/introduction-to-ips-1534596.html"> An Introduction to IPS (OTN tutorial)</a>
    </li><li>
    </li>
        <a href="https://blogs.oracle.com/barts/entry/publishing_your_own_packages_with">Short tutorial from Bart Smaalders<br/>(an IPS developer)</a>
    
    <li>
        <a href="http://docs.oracle.com/cd/E19963-01/html/820-6572/ghyer.html">IPS Concepts (from the IPS documentation)</a>
    </li>
    <li>
        <a href="http://docs.oracle.com/cd/E23824_01/html/E21802/gkokf.html">PKG Command documentation</a>
    </li>
    <li>
        <a href="http://hub.opensolaris.org/bin/download/Project+pkg/files/ipsdevguide.pdf">IPS Developer's Guide (pdf book)</a>
    </li>
</ul>

      ]]></description>
      <pubDate>Mon, 06 Aug 2012 13:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2012/08/06/setting-up-ips-for-multi-arch-packages/</guid>
      <link>https://www.timswast.com/blog/2012/08/06/setting-up-ips-for-multi-arch-packages/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Matplotlib 1.1.0 for Solaris on SPARC and x86, Part 1: Compiling</title>
      <description><![CDATA[
        
<p class="p-summary">This is part 1 of a three-part series on building and
packaging matplotlib as a multi-architecture, Solaris IPS package. At the end
of this series, you should be able to install matplotlib as easily as any
other Solaris 11 package, on both SPARC and x86 machines.</p>

<ol>
  <a href="/blog/2012/08/06/compiling-matplotlib-with-solaris-studio/"><li>
    Compiling matplotlib 1.1.0 for Solaris on SPARC and x86
  </li></a>
  <a href="/blog/2012/08/06/setting-up-ips-for-multi-arch-packages/"><li>
    Setting up Solaris IPS servers to host packages for SPARC and x86
  </li></a>
  <a href="/blog/2012/08/06/packaging-matplotlib-for-multi-arch/"><li>
    Packaging matplotlib 1.1.0 for Solaris on SPARC and x86
  </li></a>
</ol>

<pre>pkg install library/python-2/python-matplotlib-26
</pre>

<img alt="Example of a plot made with
matplotlib" src="/blog/2012/08/06/images/cohere_demo1.png" title="Example of a plot made with matplotlib"/>

<h2>Overview</h2>

<p><a href="https://matplotlib.org/">Matplotlib</a> is a library for creating
plots from Python.

</p><p>Matplotlib has become a frequently used tool in my toolbox. I love how
simple it is to go from a couple numpy arrays to many different types of
plots.

</p><h2>Setup build environment</h2>

<p>For this build we will be using <a href="http://www.oracle.com/technetwork/server-storage/solarisstudio/overview/index.html">Solaris
Studio</a>. Add Solaris Studio to your path. My Solaris Studio was installed
at <code>/opt/SUNWspro</code>, so I ran:

</p><pre>export PATH="/opt/SUNWspro/bin:${PATH}"
</pre>

<p>Solaris 11 comes with Python 2.6 and numpy libraries built-in. Using these
worked just fine for me.

</p><p>If not done before, install system headers, for compilation. If these are
not present, you will get an error like: <code>"/usr/include/python2.6/Python.h",
line 22: Error: #error "Something's broken. UCHAR_MAX should be defined in
limits.h.".</code>

</p><pre>sudo pkg install system/header</pre>

<p>We need to trick Python distutils into using C++ instead of C. The easiest
way I found to do this was to set the C compiler environment variable to the
Solaris Studio C++ compiler.

</p><pre>export CC=CC
</pre>

<h2>Apply changes to matplotlib 1.1.0</h2>

<p>I used the <a href="http://sourceforge.net/projects/matplotlib/files/matplotlib/matplotlib-1.1.0/matplotlib-1.1.0.tar.gz/download">source
distribution of matplotlib 1.1.0</a> for these instructions. Different
changes may be needed for other versions.

</p><p>There are only a few changes needed to get matplotlib to compile with
Solaris Studio. Basically, I needed to set the standard libraries to
<code>['Crun', 'Cstd']</code>. I then had to change every library listed in
the build file to link with the standard libraries (add the std_libs
extension to all <code>build_*</code> functions in compile).

</p><pre>diff -r matplotlib-1.1.0/setupext.py matplotlib-1.1.0-modified/setupext.py
43a44,47
&gt; SOLARIS
&gt;
&gt;   &gt; python setup.py build --compiler=?
&gt;
260a265,267
&gt; elif sys.platform == 'sunos5':
&gt;     std_libs = ['Crun', 'Cstd']
&gt;     print "sunos5 libraries set"
343a351
&gt;     module.include_dirs.append('/usr/include')
1044a1053,1054
&gt; 	# put this last for library link order
&gt;     module.libraries.extend(std_libs)
1057a1068,1069
&gt; 	# put this last for library link order
&gt;     module.libraries.extend(std_libs)
1071a1084,1085
&gt; 	# put this last for library link order
&gt;     module.libraries.extend(std_libs)
1094a1109,1110
&gt; 	# put this last for library link order
&gt;     module.libraries.extend(std_libs)
1113a1130,1131
&gt; 	# put this last for library link order
&gt;     module.libraries.extend(std_libs)
1153d1170
&lt;
1154a1172,1174
&gt;
&gt; 	# put this last for library link order
&gt;     module.libraries.extend(std_libs)
1187d1206
&lt;
1188a1208,1210
&gt;
&gt; 	# put this last for library link order
&gt;     module.libraries.extend(std_libs)
1221d1242
&lt;
1222a1244,1246
&gt;
&gt; 	# put this last for library link order
&gt;     module.libraries.extend(std_libs)
1249d1272
&lt;
1250a1274,1276
&gt;
&gt; 	# put this last for library link order
&gt;     module.libraries.extend(std_libs)
1270a1297,1299
&gt;
&gt; 	# put this last for library link order
&gt;     delaunay.libraries.extend(std_libs)
1286d1314
&lt;
1287a1316,1318
&gt;
&gt; 	# put this last for library link order
&gt;     module.libraries.extend(std_libs)
1302d1332
&lt;
1304a1335,1336
&gt;     # put this last for library link order
&gt;     module.libraries.extend(std_libs)
1305a1338
&gt;
1323d1355
&lt;
1325a1358,1359
&gt;     # put this last for library link order
&gt;     module.libraries.extend(std_libs)
1326a1361,1362
&gt;
&gt;
1340a1377,1380
&gt;
&gt;     # put this last for library link order
&gt;     module.libraries.extend(std_libs)
&gt;
</pre>
<a href="/blog/2012/08/06/compiling-matplotlib-with-solaris-studio/setupext.py.diff">setupext.py.diff</a>

<h2>Compile!</h2>

<p>If this is the only machine on which you need matplotlib, you can go ahead
an run the standard Python build commands:

</p><pre>python setup.py build
python setup.py install
</pre>

<p>To build a multiple architecture matplotlib IPS package, the easiest thing
to do is to build on a SPARC machine and an x86 machine. This means following
these instructions twice, once on each machine.

</p><p>In order to create a package of matplotlib for use on other machines, one
should install to a "prototype" installation folder. Since Python is
installed in <code>/usr</code> on S11, we create a faux "usr" directory in
our prototype installation folder. Replace <code>[sparc|i386]</code> with
whichever architecture you are currently building.

</p><pre>mkdir ../install_[sparc|i386]
mkdir ../install_[sparc|i386]/usr
</pre>

<p>
Next, use the <a href="http://docs.python.org/install/index.html#alternate-installation-unix-the-prefix-scheme">distutils --prefix option</a> to install into your prototype installation folder.

</p><pre>  python setup.py install --prefix ../install_[sparc|x86]/usr
</pre>
<p></p>

<p>
That's it! Now all we need to do is package it. :-)
</p>

<p>
Thanks to Yong Sun for his very helpful instructions on <a href="http://yongsun.me/2008/11/build-matplotlib-0-98-3-on-solaris-with-sunstudio-12/">building version 0.98.3</a>.
</p>

<p>
The next step after compiling is finding a way to distribute it. In <a href="/blog/2012/08/06/setting-up-ips-for-multi-arch-packages/">part 2</a>, I walk you through setting up the IPS servers you'll need to publish matplotlib for SPARC and x86.
</p>

      ]]></description>
      <pubDate>Mon, 06 Aug 2012 12:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2012/08/06/compiling-matplotlib-with-solaris-studio/</guid>
      <link>https://www.timswast.com/blog/2012/08/06/compiling-matplotlib-with-solaris-studio/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Setting up KeePassX on Mac OS X Lion</title>
      <description><![CDATA[
        
<p class="p-summary">This guide walks through the steps I followed to build
<a href="https://www.keepassx.org/">KeePassX</a> on my Mac. I found I needed
to install many prerequisites in order for it to build.</p>

<h2>Install GnuPG libraries</h2>

<p>First download and install libgpg-error.<br/>
<a href="http://www.gnupg.org/download/#libgpg-error">http://www.gnupg.org/download/#libgpg-error</a></p>

<p>Build and install. (Should go to <code>/usr/local/*</code>.)</p>

<pre>./configure
make
sudo make install</pre>

<p>Then, download and install libgcrypt.<br/>
<a href="http://www.gnupg.org/download/#libgcrypt">http://www.gnupg.org/download/#libgcrypt</a></p>

<p>Build and install.</p>

<pre>./configure
make
sudo make install</pre>

<h2>Install Qt4</h2>

<p>Download and install Qt4 from <a href="http://qt.nokia.com/downloads">http://qt.nokia.com/downloads</a>.</p>

<p>Note that in order for me to get the installer to work, I had to install
to a subdirectory of my home directory, not in a global location. I think
this is because the post-install scripts don’t ask for the proper
permissions. They’ll fail if you don’t have write permissions to
a directory.</p>

<p>After it was installed, I had to add the Qt utilities to my
<code>~/.bash_profile</code>. For me, these were located in
<code>~/QtSDK/Desktop/Qt/474/gcc/bin</code>.</p>

<h2>Build KeePassX</h2>

<p>In order to build KeePassX, I had to add a “bundle
destination” to <code>src/CMakeLists.txt</code>.</p>

<pre>$ diff src/CMakeLists.txt.old src/CMakeLists.txt
  add_executable( ${PROGNAME} WIN32 MACOSX_BUNDLE main.cpp )
  target_link_libraries( ${PROGNAME} keepassx_core \
    ${QT_QTCORE_LIBRARY} ${QT_QTGUI_LIBRARY} \
    ${GCRYPT_LIBRARIES} ${ZLIB_LIBRARIES} )
- install(TARGETS ${PROGNAME} DESTINATION ${BIN_INSTALL_DIR})
+ install(TARGETS ${PROGNAME}
+     BUNDLE DESTINATION .
+     RUNTIME DESTINATION ${BIN_INSTALL_DIR} COMPONENT Runtime)
</pre>

<p>Then, as the INSTALL file says, run</p>
<pre>mkdir build
cd build
cmake ..
make
</pre>

<h2>Notes</h2>
<p>For this project, I thought I had to tell configure to use the 32-bit
architecture, since it couldn’t find symbols when I tried the default
64-bit. (It turns out that I just hadn’t installed the libraries in the
correct order.)</p>

<p>For future reference, if you need to force a 32-bit architecture, do
this.</p>

<pre>./configure CC="gcc -arch i386" CXX="g++ -arch i386"
make
sudo make install</pre>

      ]]></description>
      <pubDate>Sun, 08 Jan 2012 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2012/01/08/setting-up-keepassx-on-mac-os-x-lion/</guid>
      <link>https://www.timswast.com/blog/2012/01/08/setting-up-keepassx-on-mac-os-x-lion/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Gravity v0.1 released.</title>
      <description><![CDATA[
        
<p class="p-summary">I just put a new version of Gravity (beta) on <a href="http://www.kongregate.com/games/TimSwast/gravity-beta">Kongregate</a>.
I added support for multiple masses and also obstacles. Also, I fixed a
bug with the physics system. The physics are much more
“realistic” now. Force actually decreases with distance now!</p>

<h2>Lessons Learned</h2>

<p>When I added support for multiple masses, I noticed that the physics were
acting “funny”. It seemed like the little boxes were being more
attracted by masses on the opposite side of the map than the to ones they
were near.</p>

<p>It turns out that AS3 does not have an exponentiation operator. My late
night coding resulted in the following mistake.</p>

<pre><code>
<em>// I don't think I ordered an XOR.</em>
<b>var</b> dist:Number = Math.sqrt(
        (massPt.x - object.x) ^ 2 +
        (massPt.y - object.y) ^ 2);

<em>// this is what I should have said.</em>
<b>var</b> dist:Number = Math.sqrt(
        Math.pow(massPt.x - object.x, 2) +
        Math.pow(massPt.y - object.y, 2));
</code></pre>

<p>Also, it turns out that <a href="http://flixel.org/">Flixel</a> makes the
nice memory-saving optimization of reusing graphics of the same size when you
do <code>makeGraphic()</code>. I had to tell it to make a unique version so
that I could change the background color on my buttons for add / remove.</p>

<footer>
  Released under <a href="https://creativecommons.org/licenses/by/4.0/">Creative Commons
  Attribution License</a>.
  Copyright 2011.
</footer>

      ]]></description>
      <pubDate>Mon, 21 Nov 2011 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2011/11/21/gravity-v0-1-released/</guid>
      <link>https://www.timswast.com/blog/2011/11/21/gravity-v0-1-released/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Gravity for the 0h Game Jam</title>
      <description><![CDATA[
        
<p class="e-summary">Last night was the <a href="http://www.ludumdare.com/compo/2011/10/30/0h-game-jam-not-over-yet/">0h
Game Jam</a>, since it was daylight savings. I decided to make a very simple
physics game, where you place a mass in order to make the little
“crates” hit a target. You can play my game on <a href="http://www.kongregate.com/games/TimSwast/gravity-beta">Kongregate</a>.</p>

<a href="http://www.kongregate.com/games/TimSwast/gravity-beta"><img alt="gravity screenshot" class="pixel-art u-photo" src="/blog/2011/11/06/gravity-for-the-0h-game-jam/gravity.png" title="Gravity screenshot"/></a>

<h2>Overview</h2>

<p>The main idea of the game is that it is a puzzle game build around
Newton’s gravity equation. Force = G * Mass1 * Mass2 / Distance^2</p>

<h2>Lessons Learned</h2>

<p>Most of my time was spent just getting Flash Builder to compile a template
project. I should have created an ActionScript project instead of a Flex
project.</p>

<p>Once I got going, I think I did the right thing by not worrying much about
making it have just the right architecture. Instead, I created one FlxState
and did all the game logic there. For a simple game like this, there
wasn’t much need to to make things object-oriented.</p>

<h2>Plans</h2>

<p>I hope to make more levels and add obstacles to make this more of a puzzle
game. Also, I’d very much like to port this to mobile devices.</p>


      ]]></description>
      <pubDate>Sun, 06 Nov 2011 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2011/11/06/gravity-for-the-0h-game-jam/</guid>
      <link>https://www.timswast.com/blog/2011/11/06/gravity-for-the-0h-game-jam/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Plain text tables with Python's % operator</title>
      <description><![CDATA[
        
<p class="p-summary">So, say you had a console Python application where you
are trying to print a table of numbers as your output. Printing the numbers
without any formatting is messy. By using formatting options for the
<code>%</code> operator, you can make tables that are much easier to
read.</p>

<p>The first time you print a table, you might try the following:

</p><pre><code>print label, number_1, number_2, number_3</code></pre>

<p>Your "table" would end up looking like:</p>

<pre class="prettyprint"><code>The first row 1.001 2.0983 10.12
Another row 11.4 3.144 35.973
Look! Yet another row 12.6 99.72 1.892
</code></pre>

<p>Yikes, that table is ugly! I can't tell which number belongs to which
column. There must be a way to get Python to create a better looking table of
numbers. Good for us, there is. Batteries are included, after all. A quick
search yields <a href="https://docs.python.org/2/library/stdtypes.html#string-formatting">a
reference on C-style string formatting in Python</a>, but it is a bit light
in the examples department.</p>

<p>From the docs, it's pretty obvious that our code will be a string followed
by the % operator and then a tuple or dictionary. It even gives an example of
this where a string is printed with values from a dictionary. What it does
not tell us, is how we can use this to create our table.</p>

<p>The first thing we can do is make sure each column gets a specified amount
of characters. The longest string in our first column is 21 characters long,
so we'll want to make sure that when we make the table, all the rows end up
with a label taking up 21 characters. Likewise, the second column has a max
of 5 characters; the third has 6, and the last column also has a max of 6
characters. Also, to make the string formatting work, we have to realize that
the first column is a string, and the others are
floating-point values.</p>

<p>A simple example, just using the minimum width string formatting option
would look something like this:</p>

<pre class="prettyprint"><code>row_dictionary = {
    "label": label,
    "1": number_1,
    "2": number_2,
    "3": number_3
}
print "%(label)21s %(1)5f %(2)6f %(3)6f" <b>%</b> row_dictionary

        The first row 1.001000 2.098300 10.120000
          Another row 11.400000 3.144000 35.973000
Look! Yet another row 12.600000 99.720000 1.892000
</code></pre>

<p>Already, that's looking a lot better! But wait, what happened to our
numbers? Why did they just get so much longer? The reason our floating-point
numbers got so much longer is because when formatting as %f there is a
default precision of 6. That means, all floating point numbers we give it
will end up having 6 digits after the decimal point--even if they wouldn't be
shown after running through str().</p>

<p>So, we have to decide how much precision we want our users to see. Since
the numbers I picked are rather arbitrary, the precisions I pick can be
arbitrary as well. I think a precision of 0 for the first, 1 for the second,
and 2 for the third will work well. If you are writing an actual program, you
can choose your precisions based on the user requirements. :-)</p>

<p>Our new example table using the precisions we decided will look something
like this:</p>

<pre><code>print "%(label)21s %(1)3.0f %(2)6.1f %(3)6.2f" <b>%</b> row_dictionary

        The first row   1    2.1  10.12
          Another row  11    3.1  35.97
Look! Yet another row  13   99.7   1.89
</code></pre>

<p>I think we're almost done. Notice that by defining a precision less than
the amount of digits in the number, the final output is rounded accordingly.
Since most people expect string labels to be left aligned and because I want
to show how to use the "conversion flags", we'll make our label column
left-aligned instead of the default right alignment. That'll be pretty easy
to do, just put a - sign in front of the minimum width of 21.</p>

<pre><code>print "%(label)-21s %(1)3.0f %(2)6.1f %(3)6.2f" <b>%</b> row_dictionary
The first row           1    2.1  10.12
Another row            11    3.1  35.97
Look! Yet another row  13   99.7   1.89
</code></pre>

<p>There you have it. A beautiful table created using Python's string
formatting operator. That's all there is to it. Now your data tables are that
much easier to read.
</p>
      ]]></description>
      <pubDate>Thu, 18 Sep 2008 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2008/09/18/python-string-formatting/</guid>
      <link>https://www.timswast.com/blog/2008/09/18/python-string-formatting/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>More fun with Python (the ternary operator)</title>
      <description><![CDATA[
        
<p class="p-summary">The ternary operator isn't necessary (Python didn't have
one for years), but it can make code clearer when put to good use. The
ternary operator consists of three parts: a condition, an expression to
evaluate if the condition is true, and another expression to evaluate if the
condition is false.</p>

<p>C and its relatives have a ternary operator that looks like the
following:</p>

<pre><code>(condition) ? (evaluate when true) : (evaluate when false);
</code></pre>

<p>Python users could use a normal if statement for this. But some
programmers, who desired all the logic appear in single statement, resorted
to cryptic uses of the 'and' and 'or' operators.

</p><pre><code>(evaluate_this_first) <b>and</b> (return_this_if_the_left_was_true)
(return_if_it_evaluates_as_true) <b>or</b> (return_if_left_evaluated_as_false)
</code></pre>

<p><a href="https://www.python.org/dev/peps/pep-0308/">PEP 308</a> adds a
true ternary operator to Python:

</p><pre><code>(evaluate when true) <b>if</b> (condition) <b>else</b> (evaluate when false)
</code></pre>

<p>In my opinion, the Python ternary operator avoids some of the problems
with C-style ternary operators. Since the Python code reads more like an
English sentence, it's easier to remember which statement is evaluated when
the condition is true and which is evaluated when the condition is false.
</p>
      ]]></description>
      <pubDate>Thu, 19 Jun 2008 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2008/06/19/python-ternary-operator/</guid>
      <link>https://www.timswast.com/blog/2008/06/19/python-ternary-operator/</link>
      <author>@timswast</author>
    </item>

    <item>
      <title>Python List Comprehensions are Easy!</title>
      <description><![CDATA[
        
<p class="p-summary">I've been aware list comprehensions for a while now, but
they seemed complicated, so I was afraid to use them. Today, I found that
they really aren't that bad. In fact, if you already know how to populate a
python list inside a for loop, you're 95% there already.</p>

<p>Say you wanted to populate a python list with 7, 7's. You might go about
it by doing something like this:</p>

<pre class="prettyprint"><code>spam = []

<b>for</b> x <b>in</b> range(7):
   spam.append(7)
</code></pre>

<p>With list comprehensions this becomes a one-liner:</p>

<pre><code>spam = [7 <b>for</b> x <b>in</b> range(7)]
</code></pre>

<p>Basically, you take your for loop and shove it inside the list
declaration. Whatever you were appending goes first. Thus, if we wanted to
change our list to be 7 powers of 7, you'd write:</p>

<pre><code># this gives us [1, 7, 49, ...]
spam = [7 <b>**</b> x <b>for</b> x <b>in</b> range(7)]
</code></pre>

<p>Something as scary sounding as "list comprehension" really isn't anything
more than shoving a for loop (or two) into where you declare the list. It's
quite powerful, for being so simple.</p>

      ]]></description>
      <pubDate>Wed, 11 Jun 2008 00:00:00 </pubDate>
      <guid isPermalink="true">https://www.timswast.com/blog/2008/06/11/python-list-comprehensions/</guid>
      <link>https://www.timswast.com/blog/2008/06/11/python-list-comprehensions/</link>
      <author>@timswast</author>
    </item>

<!--END INDEX-->
  </channel>
</rss>
